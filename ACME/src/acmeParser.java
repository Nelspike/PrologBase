/* Generated By:JJTree&JavaCC: Do not edit this line. acmeParser.java */
import java.io.*;
import java.util.*;

public class acmeParser/*@bgen(jjtree)*/implements acmeParserTreeConstants, acmeParserConstants {/*@bgen(jjtree)*/
  protected JJTacmeParserState jjtree = new JJTacmeParserState();public static SymbolTable table;
        public static ArrayList<Component> components;
        public static ArrayList<Connector> connectors;
        public static ArrayList<Attachment> attachments;
        public static boolean isSystem;
        private static char keyPressed;
        private static Stack<SymbolTable> tableStack;
        private static ArrayList<String> semanticsErrors;

        private static void runComponent(String filename)
        {
            table = new SymbolTable(500);
            semanticsErrors = new ArrayList<String>();
            tableStack = new Stack<SymbolTable>();

            components = new ArrayList<Component>();
            connectors = new ArrayList<Connector>();
            attachments = new ArrayList<Attachment>();

            acmeParser parser = null;
            try
            {
              parser = new acmeParser(new FileInputStream(filename));
            }
            catch(Exception e)
            {
                        e.printStackTrace();
            }

                SimpleNode root = null;

                try
                {
                  root = parser.parse_AcmeDesign();
                }
                catch(ParseException pE)
                {
                        System.out.println(pE.getMessage());

                        System.out.println("A sintatic error has been found. Please correct your file!\u005cn");
                        return;
                }

                if(semanticsErrors.size() > 0)
                {
                        for(int i = 0; i < semanticsErrors.size(); i++)
                                System.out.println(semanticsErrors.get(i));

                        return;
                }
                else
                {
                        root.dump("");
                        System.out.println();
                        new TreeVerifier(root);
                        System.out.println("Success!\u005cn");

                        int indexOfDot = filename.indexOf('.');
                        String realName = filename.substring(0, indexOfDot);

                        if(isSystem)
                        {
                                new DotGenerator(components, connectors, attachments, realName+".dot");

                    String[] cmdarray = {"dot/dot.exe",  "-Tpng",  realName+".dot", "-o", realName+".png"};

                    try {
                            Runtime.getRuntime().exec(cmdarray);
                    } catch (IOException e) {
                            System.out.println("Cannot execute DOT generation command!");
                            e.printStackTrace();
                    }
                        }
                }
        }

        private static void waitForEnter()
    {
            System.out.println("\u005cnPress ONLY Enter to Continue...");
            pressKey();
            while(keyPressed != 13)
            {
                    System.out.println("\u005cnPress ONLY Enter to Continue...");
                    pressKey();
            }
    }

    private static void pressKey()
    {
            try {
                    keyPressed = (char) new InputStreamReader(System.in).read ();
            } catch (IOException e) {
                    System.out.println("Cannot read from Keyboard");
            }
    }

        private static void clearScreen()
        {
                System.out.println('\u005cn');
                System.out.println('\u005cn');
                System.out.println('\u005cn');
                System.out.println('\u005cn');
                System.out.println('\u005cn');
                System.out.println('\u005cn');
                System.out.println('\u005cn');
                System.out.println('\u005cn');
                System.out.println('\u005cn');
        }

  public static void main(String args []) throws ParseException
  {
        while(true)
        {
                System.out.println("ACME - Dotty Compiler Generator\u005cn");
                System.out.println("1 - Run First Test (Graph Rep) - Testsuite");
                System.out.println("2 - Run Second Test (Graph Rep) - Example");
                System.out.println("3 - Run Third Test (Syntatic Error) - Example");
                System.out.println("4 - Run Fourth Test - Example");
                System.out.println("5 - Run Fifth Test (Graph Rep)");
                System.out.println("6 - Run Sixth Test - Testsuite");
                System.out.println("7 - Run Seventh Test (Syntatic Error) - Testsuite");
                System.out.println("8 - Run Eighth Test (Semantic Error) - Testsuite");
                System.out.println("9 - Exit Client\u005cn");

                System.out.print("Choose one: ");
                Scanner input = new Scanner(System.in);
                int choice = Integer.parseInt(input.nextLine());

                switch(choice)
                {
                        case 1:
                                runComponent("testsuite/file1.acme");
                                break;
                        case 2:
                                runComponent("examples/file2.acme");
                                break;
                        case 3:
                                runComponent("examples/file3.acme");
                                break;
                        case 4:
                                runComponent("examples/file4.acme");
                                break;
                        case 5:
                                runComponent("examples/file5.acme");
                                break;
                        case 6:
                                runComponent("testsuite/file6.acme");
                                break;
                        case 7:
                                runComponent("testsuite/file7.acme");
                                break;
                        case 8:
                                runComponent("testsuite/file8.acme");
                                break;
                        case 9:
                                System.exit(0);
                                break;
                }

                waitForEnter();
                clearScreen();
        }
  }

  final public void Filename() throws ParseException {
                 /*@bgen(jjtree) Filename */
                 ASTFilename jjtn000 = new ASTFilename(JJTFILENAME);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REM:
      case 89:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          jj_consume_token(89);
          break;
        case REM:
          jj_consume_token(REM);
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
                                     jjtn000.addToken(t.image);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case PLUS:
        case REM:
        case SLASH:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 90:
            jj_consume_token(90);
            break;
          case 91:
            jj_consume_token(91);
            break;
          case MINUS:
            jj_consume_token(MINUS);
            break;
          case PLUS:
            jj_consume_token(PLUS);
            break;
          case 92:
            jj_consume_token(92);
            break;
          case 93:
            jj_consume_token(93);
            break;
          case SLASH:
            jj_consume_token(SLASH);
            break;
          case 89:
            jj_consume_token(89);
            break;
          case REM:
            jj_consume_token(REM);
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MINUS:
          case PLUS:
          case REM:
          case SLASH:
          case 89:
          case 90:
          case 91:
          case 92:
          case 93:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_2;
          }
        }
        s = jj_consume_token(IDENTIFIER);
                                                                                         jjtn000.addToken(s.image);
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public SimpleNode parse_AcmeDesign() throws ParseException {
                               /*@bgen(jjtree) parse_AcmeDesign */
                               ASTparse_AcmeDesign jjtn000 = new ASTparse_AcmeDesign(JJTPARSE_ACMEDESIGN);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t, u;
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        u = jj_consume_token(IMPORT);
                        jjtn000.addToken(u.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REM:
        case IDENTIFIER:
        case 89:
          Filename();
          jj_consume_token(94);
          break;
        case STRING_LITERAL:
          t = jj_consume_token(STRING_LITERAL);
                                      jjtn000.addToken(t.image); String s = table.addSymbol(t.image, u.image); if(!s.equals("")) semanticsErrors.add(s);
          jj_consume_token(94);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMPONENT:
        case CONNECTOR:
        case EXTENDS:
        case FAMILY:
        case GROUP:
        case INVARIANT:
        case PORT:
        case PROPERTIES:
        case PROPERTY:
        case ROLE:
        case STYLE:
        case SYSTEM:
        case ANALYSIS:
        case DESIGN:
        case HEURISTIC:
        case EXTERNAL:
        case ELEMENT:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        if (jj_2_1(2)) {
          TypeDeclaration();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FAMILY:
          case STYLE:
            FamilyDeclaration();
            break;
          case INVARIANT:
          case ANALYSIS:
          case DESIGN:
          case HEURISTIC:
          case EXTERNAL:
            DesignAnalysisDeclaration();
            break;
          case PROPERTY:
            PropertyDeclaration(-1, "");
            break;
          case PROPERTIES:
            PropertiesBlock(-1, "");
            break;
          case SYSTEM:
            SystemDeclaration();
            break;
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(0);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void FamilyDeclaration() throws ParseException {
                          /*@bgen(jjtree) FamilyDeclaration */
                          ASTFamilyDeclaration jjtn000 = new ASTFamilyDeclaration(JJTFAMILYDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t, s, u, v;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FAMILY:
        t = jj_consume_token(FAMILY);
                    jjtn000.addToken(t.image);
        break;
      case STYLE:
        t = jj_consume_token(STYLE);
                                                               jjtn000.addToken(t.image);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s = jj_consume_token(IDENTIFIER);
                      jjtn000.addToken(s.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 94:
        jj_consume_token(94);
        break;
      case 95:
        jj_consume_token(95);
        FamilyBody();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        break;
      case EXTENDS:
        u = jj_consume_token(EXTENDS);
                               jjtn000.addToken(u.image);
        lookup_TypeByName();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_5;
          }
          jj_consume_token(96);
          lookup_TypeByName();
        }
        v = jj_consume_token(WITH);
                                                            jjtn000.addToken(v.image);
        FamilyBody();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FamilyBody() throws ParseException {
                   /*@bgen(jjtree) FamilyBody */
                   ASTFamilyBody jjtn000 = new ASTFamilyBody(JJTFAMILYBODY);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      if (jj_2_3(2)) {
        t = jj_consume_token(BRACKET_OPEN);
                                 jjtn000.addToken(t.image);
        s = jj_consume_token(BRACKET_CLOSE);
                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                        jjtc000 = false;
                                                                       jjtn000.addToken(s.image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BRACKET_OPEN:
          t = jj_consume_token(BRACKET_OPEN);
               jjtn000.addToken(t.image);
          label_6:
          while (true) {
            if (jj_2_2(2)) {
              TypeDeclaration();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case ATTACHMENT:
              case ATTACHMENTS:
              case COMPONENT:
              case CONNECTOR:
              case GROUP:
              case INVARIANT:
              case PORT:
              case PORTS:
              case PROPERTIES:
              case PROPERTY:
              case REPRESENTATION:
              case ROLE:
              case ROLES:
              case ANALYSIS:
              case COMPONENTS:
              case DESIGN:
              case HEURISTIC:
              case CONNECTORS:
              case EXTERNAL:
                SystemStructure();
                break;
              default:
                jj_la1[14] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ATTACHMENT:
            case ATTACHMENTS:
            case COMPONENT:
            case CONNECTOR:
            case EXTENDS:
            case GROUP:
            case INVARIANT:
            case PORT:
            case PORTS:
            case PROPERTIES:
            case PROPERTY:
            case REPRESENTATION:
            case ROLE:
            case ROLES:
            case ANALYSIS:
            case COMPONENTS:
            case DESIGN:
            case HEURISTIC:
            case CONNECTORS:
            case EXTERNAL:
            case ELEMENT:
              ;
              break;
            default:
              jj_la1[15] = jj_gen;
              break label_6;
            }
          }
          s = jj_consume_token(BRACKET_CLOSE);
                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                         jjtc000 = false;
                                                                        jjtn000.addToken(s.image);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte000;}
             }
             if (jjte000 instanceof ParseException) {
               {if (true) throw (ParseException)jjte000;}
             }
             {if (true) throw (Error)jjte000;}
    } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
             }
    }
  }

  final public void TypeDeclaration() throws ParseException {
                        /*@bgen(jjtree) TypeDeclaration */
  ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPONENT:
      case CONNECTOR:
      case EXTENDS:
      case GROUP:
      case PORT:
      case ROLE:
      case ELEMENT:
        ElementTypeDeclaration();
        break;
      case PROPERTY:
        PropertyTypeDeclaration();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ElementTypeDeclaration() throws ParseException {
                               /*@bgen(jjtree) ElementTypeDeclaration */
                               ASTElementTypeDeclaration jjtn000 = new ASTElementTypeDeclaration(JJTELEMENTTYPEDECLARATION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        t = jj_consume_token(EXTENDS);
                        jjtn000.addToken(t.image);
        lookup_TypeByName();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_7;
          }
          jj_consume_token(96);
          lookup_TypeByName();
        }
        s = jj_consume_token(WITH);
                                                        jjtn000.addToken(s.image);
        if (jj_2_4(3)) {
          parse_ElementProtoTypeDescription();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BRACKET_OPEN:
          case NEW:
            parse_descriptions(-1);
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        break;
      case ELEMENT:
        ElementProtoTypeDeclaration();
        break;
      case COMPONENT:
        ComponentTypeDeclaration(-1);
        break;
      case GROUP:
        GroupTypeDeclaration();
        break;
      case CONNECTOR:
        ConnectorTypeDeclaration();
        break;
      case PORT:
        PortTypeDeclaration();
        break;
      case ROLE:
        RoleTypeDeclaration();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void parse_descriptions(int index) throws ParseException {
                                    /*@bgen(jjtree) parse_descriptions */
                                    ASTparse_descriptions jjtn000 = new ASTparse_descriptions(JJTPARSE_DESCRIPTIONS);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t, s, v, u;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        t = jj_consume_token(NEW);
               jjtn000.addToken(t.image);
        lookup_TypeByName();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_8;
          }
          jj_consume_token(96);
          lookup_TypeByName();
        }
        break;
      case BRACKET_OPEN:
        t = jj_consume_token(BRACKET_OPEN);
                        jjtn000.addToken(t.image);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INVARIANT:
          case MEMBERS:
          case PROPERTIES:
          case PROPERTY:
          case REPRESENTATION:
          case DESIGN:
          case HEURISTIC:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_9;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MEMBERS:
            parse_GroupDescription();
            break;
          default:
            jj_la1[24] = jj_gen;
            if (jj_2_5(3)) {
              parse_PropertiesChoice();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        s = jj_consume_token(BRACKET_CLOSE);
                                                                          jjtn000.addToken(s.image);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDED:
        v = jj_consume_token(EXTENDED);
                          jjtn000.addToken(v.image);
        u = jj_consume_token(WITH);
                                                                  jjtn000.addToken(u.image);
        parse_descriptions(index);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void parse_descriptionsConn(int index) throws ParseException {
                                        /*@bgen(jjtree) parse_descriptionsConn */
                                        ASTparse_descriptionsConn jjtn000 = new ASTparse_descriptionsConn(JJTPARSE_DESCRIPTIONSCONN);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);Token t, s, v, u;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        t = jj_consume_token(NEW);
               jjtn000.addToken(t.image);
        lookup_TypeByName();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[27] = jj_gen;
            break label_10;
          }
          jj_consume_token(96);
          lookup_TypeByName();
        }
        break;
      case BRACKET_OPEN:
        t = jj_consume_token(BRACKET_OPEN);
                        jjtn000.addToken(t.image);
        label_11:
        while (true) {
          if (jj_2_6(3)) {
            ;
          } else {
            break label_11;
          }
          parse_InnerRoleDescription(index);
        }
        s = jj_consume_token(BRACKET_CLOSE);
                                                                                       jjtn000.addToken(s.image);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDED:
        v = jj_consume_token(EXTENDED);
                          jjtn000.addToken(v.image);
        u = jj_consume_token(WITH);
                                                                  jjtn000.addToken(u.image);
        parse_descriptionsConn(index);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void parse_descriptionsComp(int index) throws ParseException {
                                        /*@bgen(jjtree) parse_descriptionsComp */
                                        ASTparse_descriptionsComp jjtn000 = new ASTparse_descriptionsComp(JJTPARSE_DESCRIPTIONSCOMP);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);Token t, s, v, u;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        t = jj_consume_token(NEW);
               jjtn000.addToken(t.image);
        lookup_TypeByName();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[30] = jj_gen;
            break label_12;
          }
          jj_consume_token(96);
          lookup_TypeByName();
        }
        break;
      case BRACKET_OPEN:
        t = jj_consume_token(BRACKET_OPEN);
                        jjtn000.addToken(t.image);
        label_13:
        while (true) {
          if (jj_2_7(3)) {
            ;
          } else {
            break label_13;
          }
          parse_InnerPortDescription(index);
        }
        s = jj_consume_token(BRACKET_CLOSE);
                                                                                       jjtn000.addToken(s.image);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDED:
        v = jj_consume_token(EXTENDED);
                          jjtn000.addToken(v.image);
        u = jj_consume_token(WITH);
                                                                  jjtn000.addToken(u.image);
        parse_descriptionsComp(index);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ElementProtoTypeDeclaration() throws ParseException {
                                    /*@bgen(jjtree) ElementProtoTypeDeclaration */
                                    ASTElementProtoTypeDeclaration jjtn000 = new ASTElementProtoTypeDeclaration(JJTELEMENTPROTOTYPEDECLARATION);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t, s, u;
    try {
      t = jj_consume_token(ELEMENT);
                   jjtn000.addToken(t.image);
      s = jj_consume_token(TYPE);
                jjtn000.addToken(s.image);
      u = jj_consume_token(IDENTIFIER);
                      jjtn000.addToken(u.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        parse_ElementProtoTypeDescription();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        break;
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ComponentTypeDeclaration(int index) throws ParseException {
                                          /*@bgen(jjtree) ComponentTypeDeclaration */
                                          ASTComponentTypeDeclaration jjtn000 = new ASTComponentTypeDeclaration(JJTCOMPONENTTYPEDECLARATION);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);Token t, s, u;
    try {
      t = jj_consume_token(COMPONENT);
                     jjtn000.addToken(t.image);
      s = jj_consume_token(TYPE);
                                                             jjtn000.addToken(s.image);
      u = jj_consume_token(IDENTIFIER);
                                                                                                           jjtn000.addToken(u.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BRACKET_OPEN:
          jj_consume_token(BRACKET_OPEN);
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PORT:
            case PORTS:
            case PROPERTIES:
            case PROPERTY:
              ;
              break;
            default:
              jj_la1[35] = jj_gen;
              break label_14;
            }
            parse_ComponentDescription(index);
          }
          jj_consume_token(BRACKET_CLOSE);
          break;
        case PORT:
        case PORTS:
        case PROPERTIES:
        case PROPERTY:
          parse_ComponentDescription(index);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        break;
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GroupTypeDeclaration() throws ParseException {
                             /*@bgen(jjtree) GroupTypeDeclaration */
                             ASTGroupTypeDeclaration jjtn000 = new ASTGroupTypeDeclaration(JJTGROUPTYPEDECLARATION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t, s, u;
    try {
      t = jj_consume_token(GROUP);
                 jjtn000.addToken(t.image);
      s = jj_consume_token(TYPE);
                                                         jjtn000.addToken(s.image);
      u = jj_consume_token(IDENTIFIER);
                                                                                                       jjtn000.addToken(u.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BRACKET_OPEN:
          jj_consume_token(BRACKET_OPEN);
          label_15:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case MEMBERS:
              ;
              break;
            default:
              jj_la1[39] = jj_gen;
              break label_15;
            }
            parse_GroupDescription();
          }
          jj_consume_token(BRACKET_CLOSE);
          break;
        case MEMBERS:
          parse_GroupDescription();
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        break;
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ConnectorTypeDeclaration() throws ParseException {
                                 /*@bgen(jjtree) ConnectorTypeDeclaration */
                                 ASTConnectorTypeDeclaration jjtn000 = new ASTConnectorTypeDeclaration(JJTCONNECTORTYPEDECLARATION);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t, s, u;
    try {
      t = jj_consume_token(CONNECTOR);
                     jjtn000.addToken(t.image);
      s = jj_consume_token(TYPE);
                                                             jjtn000.addToken(s.image);
      u = jj_consume_token(IDENTIFIER);
                                                                                                           jjtn000.addToken(u.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BRACKET_OPEN:
          jj_consume_token(BRACKET_OPEN);
          label_16:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PROPERTIES:
            case PROPERTY:
            case ROLE:
            case ROLES:
              ;
              break;
            default:
              jj_la1[43] = jj_gen;
              break label_16;
            }
            parse_ConnectorDescription(-1);
          }
          jj_consume_token(BRACKET_CLOSE);
          break;
        case PROPERTIES:
        case PROPERTY:
        case ROLE:
        case ROLES:
          parse_ConnectorDescription(-1);
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[45] = jj_gen;
          ;
        }
        break;
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PortTypeDeclaration() throws ParseException {
                            /*@bgen(jjtree) PortTypeDeclaration */
                            ASTPortTypeDeclaration jjtn000 = new ASTPortTypeDeclaration(JJTPORTTYPEDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t, s, u, y, x, z;
    try {
      t = jj_consume_token(PORT);
                jjtn000.addToken(t.image);
      s = jj_consume_token(TYPE);
                                                        jjtn000.addToken(s.image);
      u = jj_consume_token(IDENTIFIER);
                                                                                                      jjtn000.addToken(u.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BRACKET_OPEN:
          case NEW:
            ;
            break;
          default:
            jj_la1[47] = jj_gen;
            break label_17;
          }
          parse_descriptions(-1);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[48] = jj_gen;
          ;
        }
        break;
      case EXTENDS:
        y = jj_consume_token(EXTENDS);
                             jjtn000.addToken(y.image);
        x = jj_consume_token(IDENTIFIER);
                                                                           jjtn000.addToken(x.image);
        z = jj_consume_token(WITH);
                                                                                                                   jjtn000.addToken(z.image);
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BRACKET_OPEN:
          case NEW:
            ;
            break;
          default:
            jj_la1[49] = jj_gen;
            break label_18;
          }
          parse_descriptions(-1);
        }
        jj_consume_token(94);
        break;
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RoleTypeDeclaration() throws ParseException {
                            /*@bgen(jjtree) RoleTypeDeclaration */
                            ASTRoleTypeDeclaration jjtn000 = new ASTRoleTypeDeclaration(JJTROLETYPEDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t, s, u;
    try {
      t = jj_consume_token(ROLE);
                jjtn000.addToken(t.image);
      s = jj_consume_token(TYPE);
                                                        jjtn000.addToken(s.image);
      u = jj_consume_token(IDENTIFIER);
                                                                                                      jjtn000.addToken(u.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        parse_descriptions(-1);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        break;
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void lookup_TypeByName() throws ParseException {
                          /*@bgen(jjtree) lookup_TypeByName */
                          ASTlookup_TypeByName jjtn000 = new ASTlookup_TypeByName(JJTLOOKUP_TYPEBYNAME);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_8(2)) {
        t = jj_consume_token(IDENTIFIER);
                                     jjtn000.addToken(t.image);
        jj_consume_token(90);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                            jjtc000 = false;
                                                                                           jjtn000.addToken(t.image);
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void lookup_arbitraryTypeByName() throws ParseException {
                                   /*@bgen(jjtree) lookup_arbitraryTypeByName */
                                   ASTlookup_arbitraryTypeByName jjtn000 = new ASTlookup_arbitraryTypeByName(JJTLOOKUP_ARBITRARYTYPEBYNAME);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case ENUM:
      case FLOAT:
      case INT:
      case RECORD:
      case SEQUENCE:
      case SET:
      case STRING:
      case ANY:
      case IDENTIFIER:
        PropertyTypeDescription();
        break;
      case SYSTEM:
        t = jj_consume_token(SYSTEM);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.addToken(t.image);
        break;
      case COMPONENT:
        t = jj_consume_token(COMPONENT);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.addToken(t.image);
        break;
      case GROUP:
        t = jj_consume_token(GROUP);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.addToken(t.image);
        break;
      case CONNECTOR:
        t = jj_consume_token(CONNECTOR);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.addToken(t.image);
        break;
      case PORT:
        t = jj_consume_token(PORT);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.addToken(t.image);
        break;
      case ROLE:
        t = jj_consume_token(ROLE);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.addToken(t.image);
        break;
      case PROPERTY:
        t = jj_consume_token(PROPERTY);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.addToken(t.image);
        break;
      case REPRESENTATION:
        t = jj_consume_token(REPRESENTATION);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.addToken(t.image);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SystemDeclaration() throws ParseException {
                          /*@bgen(jjtree) SystemDeclaration */
                          ASTSystemDeclaration jjtn000 = new ASTSystemDeclaration(JJTSYSTEMDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      t = jj_consume_token(SYSTEM);
                  jjtn000.addToken(t.image); isSystem = true;
      s = jj_consume_token(IDENTIFIER);
                      jjtn000.addToken(s.image); table.addSymbol(s.image, t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        lookup_TypeByName();
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[55] = jj_gen;
            break label_19;
          }
          jj_consume_token(96);
          lookup_TypeByName();
        }
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        SystemBody();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[57] = jj_gen;
          ;
        }
        break;
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SystemBody() throws ParseException {
                   /*@bgen(jjtree) SystemBody */
                   ASTSystemBody jjtn000 = new ASTSystemBody(JJTSYSTEMBODY);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        t = jj_consume_token(NEW);
                 jjtn000.addToken(t.image);
        lookup_TypeByName();
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[59] = jj_gen;
            break label_20;
          }
          jj_consume_token(96);
          lookup_TypeByName();
        }
        break;
      case BRACKET_OPEN:
        jj_consume_token(BRACKET_OPEN);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTACHMENT:
          case ATTACHMENTS:
          case COMPONENT:
          case CONNECTOR:
          case GROUP:
          case INVARIANT:
          case PORT:
          case PORTS:
          case PROPERTIES:
          case PROPERTY:
          case REPRESENTATION:
          case ROLE:
          case ROLES:
          case ANALYSIS:
          case COMPONENTS:
          case DESIGN:
          case HEURISTIC:
          case CONNECTORS:
          case EXTERNAL:
            ;
            break;
          default:
            jj_la1[60] = jj_gen;
            break label_21;
          }
          SystemStructure();
        }
        jj_consume_token(BRACKET_CLOSE);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDED:
        t = jj_consume_token(EXTENDED);
                            jjtn000.addToken(t.image);
        s = jj_consume_token(WITH);
                              jjtn000.addToken(s.image);
        SystemBody();
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SystemStructure() throws ParseException {
                        /*@bgen(jjtree) SystemStructure */
  ASTSystemStructure jjtn000 = new ASTSystemStructure(JJTSYSTEMSTRUCTURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPONENT:
        ComponentDeclaration();
        break;
      case COMPONENTS:
        ComponentsBlock();
        break;
      case GROUP:
        GroupDeclaration();
        break;
      case CONNECTOR:
        ConnectorDeclaration();
        break;
      case CONNECTORS:
        ConnectorsBlock();
        break;
      case PORT:
        PortDeclaration(-1);
        break;
      case PORTS:
        PortsBlock(-1);
        break;
      case ROLE:
        RoleDeclaration(-1);
        break;
      case ROLES:
        RolesBlock(-1);
        break;
      case PROPERTY:
        PropertyDeclaration(-1, "");
        break;
      case PROPERTIES:
        PropertiesBlock(-1, "");
        break;
      case ATTACHMENT:
      case ATTACHMENTS:
        AttachmentsDeclaration();
        break;
      case REPRESENTATION:
        RepresentationDeclaration();
        break;
      case INVARIANT:
      case ANALYSIS:
      case DESIGN:
      case HEURISTIC:
      case EXTERNAL:
        DesignAnalysisDeclaration();
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void parse_ElementProtoTypeDescription() throws ParseException {
                                           /*@bgen(jjtree) parse_ElementProtoTypeDescription */
  ASTparse_ElementProtoTypeDescription jjtn000 = new ASTparse_ElementProtoTypeDescription(JJTPARSE_ELEMENTPROTOTYPEDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BRACKET_OPEN);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROPERTIES:
        case PROPERTY:
        case REPRESENTATION:
          ;
          break;
        default:
          jj_la1[64] = jj_gen;
          break label_22;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROPERTY:
          PropertyDeclaration(-1, "");
          break;
        case PROPERTIES:
          PropertiesBlock(-1, "");
          break;
        case REPRESENTATION:
          RepresentationDeclaration();
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(BRACKET_CLOSE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GroupDeclaration() throws ParseException {
                         /*@bgen(jjtree) GroupDeclaration */
                         ASTGroupDeclaration jjtn000 = new ASTGroupDeclaration(JJTGROUPDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t, s, x, y, z, a;
    try {
      t = jj_consume_token(GROUP);
                 jjtn000.addToken(t.image);
      s = jj_consume_token(IDENTIFIER);
                                                               jjtn000.addToken(s.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        lookup_TypeByName();
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[66] = jj_gen;
            break label_23;
          }
          jj_consume_token(96);
          lookup_TypeByName();
        }
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          x = jj_consume_token(NEW);
                     jjtn000.addToken(x.image);
          y = jj_consume_token(IDENTIFIER);
                                                                   jjtn000.addToken(y.image);
          z = jj_consume_token(EXTENDED);
                                                                                                               jjtn000.addToken(z.image);
          a = jj_consume_token(WITH);
                                                                                                                                                       jjtn000.addToken(a.image);
          break;
        default:
          jj_la1[68] = jj_gen;
          ;
        }
        parse_GroupDescription();
        jj_consume_token(94);
        break;
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void parse_GroupDescription() throws ParseException {
                               /*@bgen(jjtree) parse_GroupDescription */
  ASTparse_GroupDescription jjtn000 = new ASTparse_GroupDescription(JJTPARSE_GROUPDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MembersBlock();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ComponentDeclaration() throws ParseException {
                             /*@bgen(jjtree) ComponentDeclaration */
                             ASTComponentDeclaration jjtn000 = new ASTComponentDeclaration(JJTCOMPONENTDECLARATION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t, s, u, v, x, y, z, a; int index = 0;
    try {
      t = jj_consume_token(COMPONENT);
                     jjtn000.addToken(t.image);
      s = jj_consume_token(IDENTIFIER);
                      jjtn000.addToken(s.image); String st = table.addSymbol(s.image, t.image); if(!st.equals("")) {semanticsErrors.add(st);}
        SymbolTable copy = new SymbolTable(table.getStrings()); tableStack.push(copy);
        Component comp = new Component(s.image);
            components.add(comp);
            index = components.size()-1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        lookup_TypeByName();
        label_24:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[70] = jj_gen;
            break label_24;
          }
          jj_consume_token(96);
          lookup_TypeByName();
        }
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          x = jj_consume_token(NEW);
                     jjtn000.addToken(x.image);
          y = jj_consume_token(IDENTIFIER);
                            jjtn000.addToken(y.image);
          z = jj_consume_token(EXTENDED);
                          jjtn000.addToken(z.image);
          a = jj_consume_token(WITH);
                      jjtn000.addToken(a.image);
          break;
        default:
          jj_la1[72] = jj_gen;
          ;
        }
        u = jj_consume_token(BRACKET_OPEN);
                        jjtn000.addToken(u.image);
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PORT:
          case PORTS:
          case PROPERTIES:
          case PROPERTY:
            ;
            break;
          default:
            jj_la1[73] = jj_gen;
            break label_25;
          }
          parse_ComponentDescription(index);
        }
        v = jj_consume_token(BRACKET_CLOSE);
                         jjtn000.addToken(v.image); table = new SymbolTable(tableStack.pop().getStrings());
        jj_consume_token(94);
        break;
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ComponentsBlock() throws ParseException {
                        /*@bgen(jjtree) ComponentsBlock */
                        ASTComponentsBlock jjtn000 = new ASTComponentsBlock(JJTCOMPONENTSBLOCK);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t, s, u, v, x, y; int index = 0;
    try {
      t = jj_consume_token(COMPONENTS);
                      jjtn000.addToken(t.image);
      x = jj_consume_token(BRACKET_OPEN);
                                                           jjtn000.addToken(x.image);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_26;
        }
        s = jj_consume_token(IDENTIFIER);
     jjtn000.addToken(s.image); Component c = new Component(s.image); components.add(c); index = components.size()-1;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 91:
          jj_consume_token(91);
          lookup_TypeByName();
          label_27:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 96:
              ;
              break;
            default:
              jj_la1[76] = jj_gen;
              break label_27;
            }
            jj_consume_token(96);
            lookup_TypeByName();
          }
          break;
        default:
          jj_la1[77] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          jj_consume_token(95);
          u = jj_consume_token(BRACKET_OPEN);
                              jjtn000.addToken(u.image);
          label_28:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PORT:
            case PORTS:
            case PROPERTIES:
            case PROPERTY:
              ;
              break;
            default:
              jj_la1[78] = jj_gen;
              break label_28;
            }
            parse_ComponentDescription(index);
          }
          v = jj_consume_token(BRACKET_CLOSE);
                                                                                                                  jjtn000.addToken(v.image);
          jj_consume_token(94);
          break;
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      y = jj_consume_token(BRACKET_CLOSE);
                                                                                                                                                                     jjtn000.addToken(y.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void parse_ComponentDescription(int index) throws ParseException {
                                            /*@bgen(jjtree) parse_ComponentDescription */
  ASTparse_ComponentDescription jjtn000 = new ASTparse_ComponentDescription(JJTPARSE_COMPONENTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PORT:
        PortDeclaration(index);
        break;
      case PORTS:
        PortsBlock(index);
        break;
      case PROPERTIES:
        PropertiesBlock(index, "Comp");
        break;
      case PROPERTY:
        PropertyDeclaration(index, "Comp");
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void parse_InnerPortDescription(int index) throws ParseException {
                                            /*@bgen(jjtree) parse_InnerPortDescription */
  ASTparse_InnerPortDescription jjtn000 = new ASTparse_InnerPortDescription(JJTPARSE_INNERPORTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROPERTIES:
        PropertiesBlock(index, "Port");
        break;
      case PROPERTY:
        PropertyDeclaration(index, "Port");
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ConnectorDeclaration() throws ParseException {
                             /*@bgen(jjtree) ConnectorDeclaration */
                             ASTConnectorDeclaration jjtn000 = new ASTConnectorDeclaration(JJTCONNECTORDECLARATION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t, s, u, v, x, y, z, a; int index = 0;
    try {
      t = jj_consume_token(CONNECTOR);
                     jjtn000.addToken(t.image);
      s = jj_consume_token(IDENTIFIER);
                      jjtn000.addToken(s.image); String st = table.addSymbol(s.image, t.image); if(!st.equals("")) semanticsErrors.add(st);
                                SymbolTable copy = new SymbolTable(table.getStrings()); tableStack.push(copy);
     Connector conn = new Connector(s.image); connectors.add(conn); index = connectors.size()-1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        lookup_TypeByName();
        label_29:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[83] = jj_gen;
            break label_29;
          }
          jj_consume_token(96);
          lookup_TypeByName();
        }
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          x = jj_consume_token(NEW);
                     jjtn000.addToken(x.image);
          y = jj_consume_token(IDENTIFIER);
                            jjtn000.addToken(y.image);
          z = jj_consume_token(EXTENDED);
                          jjtn000.addToken(z.image);
          a = jj_consume_token(WITH);
                      jjtn000.addToken(a.image);
          break;
        default:
          jj_la1[85] = jj_gen;
          ;
        }
        u = jj_consume_token(BRACKET_OPEN);
                        jjtn000.addToken(u.image);
        label_30:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROPERTIES:
          case PROPERTY:
          case ROLE:
          case ROLES:
            ;
            break;
          default:
            jj_la1[86] = jj_gen;
            break label_30;
          }
          parse_ConnectorDescription(index);
        }
        v = jj_consume_token(BRACKET_CLOSE);
                                                                                                              jjtn000.addToken(v.image); table = new SymbolTable(tableStack.pop().getStrings());
        jj_consume_token(94);
        break;
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ConnectorsBlock() throws ParseException {
                        /*@bgen(jjtree) ConnectorsBlock */
                        ASTConnectorsBlock jjtn000 = new ASTConnectorsBlock(JJTCONNECTORSBLOCK);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t, s, u, v; int index = 0;
    try {
      t = jj_consume_token(CONNECTORS);
                      jjtn000.addToken(t.image);
      jj_consume_token(BRACKET_OPEN);
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_31;
        }
        s = jj_consume_token(IDENTIFIER);
                        jjtn000.addToken(s.image); connectors.add(new Connector(s.image)); index = connectors.size()-1;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 91:
          jj_consume_token(91);
          lookup_TypeByName();
          label_32:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 96:
              ;
              break;
            default:
              jj_la1[89] = jj_gen;
              break label_32;
            }
            jj_consume_token(96);
            lookup_TypeByName();
          }
          break;
        default:
          jj_la1[90] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          jj_consume_token(95);
          u = jj_consume_token(BRACKET_OPEN);
                               jjtn000.addToken(u.image);
          label_33:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PROPERTIES:
            case PROPERTY:
            case ROLE:
            case ROLES:
              ;
              break;
            default:
              jj_la1[91] = jj_gen;
              break label_33;
            }
            parse_ConnectorDescription(index);
          }
          v = jj_consume_token(BRACKET_CLOSE);
                                                               jjtn000.addToken(v.image);
          jj_consume_token(94);
          break;
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[92] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(BRACKET_CLOSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[93] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void parse_ConnectorDescription(int index) throws ParseException {
                                            /*@bgen(jjtree) parse_ConnectorDescription */
  ASTparse_ConnectorDescription jjtn000 = new ASTparse_ConnectorDescription(JJTPARSE_CONNECTORDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROLE:
        RoleDeclaration(index);
        break;
      case ROLES:
        RolesBlock(index);
        break;
      case PROPERTIES:
        PropertiesBlock(index, "Conn");
        break;
      case PROPERTY:
        PropertyDeclaration(index, "Conn");
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void parse_InnerRoleDescription(int index) throws ParseException {
                                            /*@bgen(jjtree) parse_InnerRoleDescription */
  ASTparse_InnerRoleDescription jjtn000 = new ASTparse_InnerRoleDescription(JJTPARSE_INNERROLEDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROPERTIES:
        PropertiesBlock(index, "Role");
        break;
      case PROPERTY:
        PropertyDeclaration(index, "Role");
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PortDeclaration(int index) throws ParseException {
                                 /*@bgen(jjtree) PortDeclaration */
                                 ASTPortDeclaration jjtn000 = new ASTPortDeclaration(JJTPORTDECLARATION);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      t = jj_consume_token(PORT);
               jjtn000.addToken(t.image);
      s = jj_consume_token(IDENTIFIER);
                                                             jjtn000.addToken(s.image);
   if(index != -1) {components.get(index).addProperty(t.image, s.image+"_"+components.get(index).getName()); components.get(index).addValue("");}
    String st = table.addSymbol(s.image, t.image); if(!st.equals("")) semanticsErrors.add(st);
    SymbolTable copy = new SymbolTable(table.getStrings()); tableStack.push(copy);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        lookup_TypeByName();
        label_34:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[96] = jj_gen;
            break label_34;
          }
          jj_consume_token(96);
          lookup_TypeByName();
        }
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        parse_descriptionsComp(index);
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
    table = new SymbolTable(tableStack.pop().getStrings());
      jj_consume_token(94);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void PortsBlock(int index) throws ParseException {
                            /*@bgen(jjtree) PortsBlock */
                            ASTPortsBlock jjtn000 = new ASTPortsBlock(JJTPORTSBLOCK);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t, s, x, y;
    try {
      t = jj_consume_token(PORTS);
                 jjtn000.addToken(t.image);
      x = jj_consume_token(BRACKET_OPEN);
                                                       jjtn000.addToken(x.image);
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[99] = jj_gen;
          break label_35;
        }
        s = jj_consume_token(IDENTIFIER);
                        jjtn000.addToken(s.image); components.get(index).addProperty("Port", s.image+components.get(index).getName());
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 91:
        case 94:
        case 95:
        case 96:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            jj_consume_token(96);
            break;
          case 91:
          case 94:
          case 95:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 91:
              jj_consume_token(91);
              lookup_TypeByName();
              label_36:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case 96:
                  ;
                  break;
                default:
                  jj_la1[100] = jj_gen;
                  break label_36;
                }
                jj_consume_token(96);
                lookup_TypeByName();
              }
              break;
            default:
              jj_la1[101] = jj_gen;
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 95:
              jj_consume_token(95);
              parse_descriptions(index);
              jj_consume_token(94);
              break;
            case 94:
              jj_consume_token(94);
              break;
            default:
              jj_la1[102] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[103] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[104] = jj_gen;
          ;
        }
      }
      y = jj_consume_token(BRACKET_CLOSE);
             jjtn000.addToken(y.image);
      jj_consume_token(94);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void parse_PortRoleDescription() throws ParseException {
                                  /*@bgen(jjtree) parse_PortRoleDescription */
  ASTparse_PortRoleDescription jjtn000 = new ASTparse_PortRoleDescription(JJTPARSE_PORTROLEDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INVARIANT:
        case PROPERTIES:
        case PROPERTY:
        case REPRESENTATION:
        case DESIGN:
        case HEURISTIC:
          ;
          break;
        default:
          jj_la1[105] = jj_gen;
          break label_37;
        }
        parse_PropertiesChoice();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RoleDeclaration(int index) throws ParseException {
                                 /*@bgen(jjtree) RoleDeclaration */
                                 ASTRoleDeclaration jjtn000 = new ASTRoleDeclaration(JJTROLEDECLARATION);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      t = jj_consume_token(ROLE);
                jjtn000.addToken(t.image);
      s = jj_consume_token(IDENTIFIER);
                                                              jjtn000.addToken(s.image);
     if(index != -1) {connectors.get(index).addProperty(t.image, s.image); connectors.get(index).addValue("");}
     String st = table.addSymbol(s.image, t.image); if(!st.equals("")) semanticsErrors.add(st);
     SymbolTable copy = new SymbolTable(table.getStrings()); tableStack.push(copy);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        lookup_TypeByName();
        label_38:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[106] = jj_gen;
            break label_38;
          }
          jj_consume_token(96);
          lookup_TypeByName();
        }
        break;
      default:
        jj_la1[107] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
        parse_descriptionsConn(index);
                                         table = new SymbolTable(tableStack.pop().getStrings());
        jj_consume_token(94);
        break;
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MembersBlock() throws ParseException {
                     /*@bgen(jjtree) MembersBlock */
                     ASTMembersBlock jjtn000 = new ASTMembersBlock(JJTMEMBERSBLOCK);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t, x, y;
    try {
      t = jj_consume_token(MEMBERS);
                   jjtn000.addToken(t.image);
      x = jj_consume_token(BRACKET_OPEN);
                                                        jjtn000.addToken(x.image);
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[109] = jj_gen;
          break label_39;
        }
        QualifiedReference();
        jj_consume_token(94);
      }
      y = jj_consume_token(BRACKET_CLOSE);
                                                                                                                              jjtn000.addToken(y.image);
      jj_consume_token(94);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void QualifiedReference() throws ParseException {
                            /*@bgen(jjtree) QualifiedReference */
                            ASTQualifiedReference jjtn000 = new ASTQualifiedReference(JJTQUALIFIEDREFERENCE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      t = jj_consume_token(IDENTIFIER);
                      jjtn000.addToken(t.image);
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 90:
          ;
          break;
        default:
          jj_la1[110] = jj_gen;
          break label_40;
        }
        jj_consume_token(90);
        s = jj_consume_token(IDENTIFIER);
                                                                            jjtn000.addToken(s.image);
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RolesBlock(int index) throws ParseException {
                            /*@bgen(jjtree) RolesBlock */
                            ASTRolesBlock jjtn000 = new ASTRolesBlock(JJTROLESBLOCK);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      t = jj_consume_token(ROLES);
                 jjtn000.addToken(t.image);
      jj_consume_token(BRACKET_OPEN);
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[111] = jj_gen;
          break label_41;
        }
        s = jj_consume_token(IDENTIFIER);
                        jjtn000.addToken(s.image); if(index != -1) connectors.get(index).addProperty("Role", s.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 91:
        case 94:
        case 95:
        case 96:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            jj_consume_token(96);
            break;
          case 91:
          case 94:
          case 95:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 91:
              jj_consume_token(91);
              lookup_TypeByName();
              label_42:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case 96:
                  ;
                  break;
                default:
                  jj_la1[112] = jj_gen;
                  break label_42;
                }
                jj_consume_token(96);
                lookup_TypeByName();
              }
              break;
            default:
              jj_la1[113] = jj_gen;
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 95:
              jj_consume_token(95);
              parse_descriptions(-1);
              jj_consume_token(94);
              break;
            case 94:
              jj_consume_token(94);
              break;
            default:
              jj_la1[114] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[115] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[116] = jj_gen;
          ;
        }
      }
      jj_consume_token(BRACKET_CLOSE);
      jj_consume_token(94);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void parse_PropertiesChoice() throws ParseException {
                                /*@bgen(jjtree) parse_PropertiesChoice */
  ASTparse_PropertiesChoice jjtn000 = new ASTparse_PropertiesChoice(JJTPARSE_PROPERTIESCHOICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROPERTY:
        PropertyDeclaration(-1, "");
        break;
      case PROPERTIES:
        PropertiesBlock(-1, "");
        break;
      case REPRESENTATION:
        RepresentationDeclaration();
        break;
      case INVARIANT:
      case DESIGN:
      case HEURISTIC:
        parse_DesignRule();
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void AttachmentsDeclaration() throws ParseException {
                               /*@bgen(jjtree) AttachmentsDeclaration */
                               ASTAttachmentsDeclaration jjtn000 = new ASTAttachmentsDeclaration(JJTATTACHMENTSDECLARATION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t, s, u, v;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTACHMENTS:
        t = jj_consume_token(ATTACHMENTS);
                           jjtn000.addToken(t.image);
        jj_consume_token(91);
        jj_consume_token(BRACKET_OPEN);
        label_43:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELEMENT:
            ;
            break;
          default:
            jj_la1[118] = jj_gen;
            break label_43;
          }
          s = jj_consume_token(ELEMENT);
                               jjtn000.addToken(s.image);
          u = jj_consume_token(TO);
                                                                      jjtn000.addToken(u.image);
          v = jj_consume_token(ELEMENT);
                                                                                                                 jjtn000.addToken(v.image);
                                        Attachment a = new Attachment();
                                        String[] from = s.image.split("\u005c\u005c.");
                                        a.setFromPackage(from[0]);
                                        a.setFromPort(from[1]);
                                        String[] to = v.image.split("\u005c\u005c.");
                                        a.setToPackage(to[0]);
                                        a.setToPort(to[1]);
                                        attachments.add(a);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BRACKET_OPEN:
            jj_consume_token(BRACKET_OPEN);
            label_44:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case PROPERTIES:
              case PROPERTY:
                ;
                break;
              default:
                jj_la1[119] = jj_gen;
                break label_44;
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case PROPERTY:
                PropertyDeclaration(-1, "");
                break;
              case PROPERTIES:
                PropertiesBlock(-1, "");
                break;
              default:
                jj_la1[120] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            jj_consume_token(BRACKET_CLOSE);
            break;
          default:
            jj_la1[121] = jj_gen;
            ;
          }
          jj_consume_token(94);
        }
        jj_consume_token(BRACKET_CLOSE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[122] = jj_gen;
          ;
        }
        break;
      case ATTACHMENT:
        t = jj_consume_token(ATTACHMENT);
                           jjtn000.addToken(t.image);
        s = jj_consume_token(ELEMENT);
                               jjtn000.addToken(s.image);
        u = jj_consume_token(TO);
                                                                      jjtn000.addToken(u.image);
        v = jj_consume_token(ELEMENT);
                                                                                                                 jjtn000.addToken(v.image);
                                        Attachment a = new Attachment();
                                        String[] from = s.image.split("\u005c\u005c.");
                                        a.setFromPackage(from[0]);
                                        a.setFromPort(from[1]);
                                        String[] to = v.image.split("\u005c\u005c.");
                                        a.setToPackage(to[0]);
                                        a.setToPort(to[1]);
                                        attachments.add(a);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BRACKET_OPEN:
          jj_consume_token(BRACKET_OPEN);
          label_45:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PROPERTIES:
            case PROPERTY:
              ;
              break;
            default:
              jj_la1[123] = jj_gen;
              break label_45;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PROPERTY:
              PropertyDeclaration(-1, "");
              break;
            case PROPERTIES:
              PropertiesBlock(-1, "");
              break;
            default:
              jj_la1[124] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(BRACKET_CLOSE);
          break;
        default:
          jj_la1[125] = jj_gen;
          ;
        }
        jj_consume_token(94);
        break;
      default:
        jj_la1[126] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PropertyDeclaration(int index, String type) throws ParseException {
                                                  /*@bgen(jjtree) PropertyDeclaration */
                                                  ASTPropertyDeclaration jjtn000 = new ASTPropertyDeclaration(JJTPROPERTYDECLARATION);
                                                  boolean jjtc000 = true;
                                                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PROPERTY);
                    jjtn000.addToken(t.image);
      parse_PropertyDescription(index, type);
      jj_consume_token(94);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PropertiesBlock(int index, String type) throws ParseException {
                                              /*@bgen(jjtree) PropertiesBlock */
                                              ASTPropertiesBlock jjtn000 = new ASTPropertiesBlock(JJTPROPERTIESBLOCK);
                                              boolean jjtc000 = true;
                                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PROPERTIES);
                      jjtn000.addToken(t.image);
      jj_consume_token(BRACKET_OPEN);
      parse_PropertyDescription(index, type);
      jj_consume_token(94);
      label_46:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROPERTY:
        case PROPBEGIN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[127] = jj_gen;
          break label_46;
        }
        parse_PropertyDescription(index, type);
        jj_consume_token(94);
      }
      jj_consume_token(BRACKET_CLOSE);
      jj_consume_token(94);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void parse_PropertyDescription(int index, String type) throws ParseException {
                                                        /*@bgen(jjtree) parse_PropertyDescription */
                                                        ASTparse_PropertyDescription jjtn000 = new ASTparse_PropertyDescription(JJTPARSE_PROPERTYDESCRIPTION);
                                                        boolean jjtc000 = true;
                                                        jjtree.openNodeScope(jjtn000);Token t, s, u, v;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROPERTY:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROPERTY:
          t = jj_consume_token(PROPERTY);
                      jjtn000.addToken(t.image);
          break;
        default:
          jj_la1[128] = jj_gen;
          ;
        }
        s = jj_consume_token(IDENTIFIER);
         jjtn000.addToken(s.image);
                if(index != -1)
                {
                  if(type.equals("Comp")) components.get(index).addProperty("Property", s.image);
                  else if(type.equals("Conn")) connectors.get(index).addProperty("Property", s.image);
                  else if(type.equals("Role")) connectors.get(index).addProperty("RoleProperty", s.image);
                  else if(type.equals("Port")) components.get(index).addProperty("PortProperty", s.image);
                }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 91:
          jj_consume_token(91);
          PropertyTypeDescription();
          break;
        default:
          jj_la1[129] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          jj_consume_token(95);
          PropertyValueDeclaration(type, index);
          break;
        default:
          jj_la1[130] = jj_gen;
          ;
        }
        break;
      case PROPBEGIN:
        u = jj_consume_token(PROPBEGIN);
                           jjtn000.addToken(u.image);
        label_47:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROPERTY:
          case PROPBEGIN:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[131] = jj_gen;
            break label_47;
          }
          parse_PropertyDescription(index, type);
          jj_consume_token(94);
        }
        v = jj_consume_token(PROPEND);
                                                                                                                       jjtn000.addToken(v.image);
        jj_consume_token(94);
        break;
      default:
        jj_la1[132] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PropertyTypeDeclaration() throws ParseException {
                                /*@bgen(jjtree) PropertyTypeDeclaration */
                                ASTPropertyTypeDeclaration jjtn000 = new ASTPropertyTypeDeclaration(JJTPROPERTYTYPEDECLARATION);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t, s, u, v, w, x;
    try {
      t = jj_consume_token(PROPERTY);
                    jjtn000.addToken(t.image);
      s = jj_consume_token(TYPE);
                                                            jjtn000.addToken(s.image);
      u = jj_consume_token(IDENTIFIER);
                                                                                                           jjtn000.addToken(u.image);
      jj_consume_token(95);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        v = jj_consume_token(INT);
                             jjtn000.addToken(v.image);
        break;
      case FLOAT:
        v = jj_consume_token(FLOAT);
                               jjtn000.addToken(v.image);
        break;
      case STRING:
        v = jj_consume_token(STRING);
                                jjtn000.addToken(v.image);
        break;
      case BOOLEAN:
        v = jj_consume_token(BOOLEAN);
                                 jjtn000.addToken(v.image);
        break;
      case ENUM:
        v = jj_consume_token(ENUM);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BRACKET_OPEN:
          jj_consume_token(BRACKET_OPEN);
          w = jj_consume_token(IDENTIFIER);
                                                     jjtn000.addToken(w.image);
          label_48:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 96:
              ;
              break;
            default:
              jj_la1[133] = jj_gen;
              break label_48;
            }
            jj_consume_token(96);
            x = jj_consume_token(IDENTIFIER);
                                                                                                        jjtn000.addToken(x.image);
          }
          jj_consume_token(BRACKET_CLOSE);
          break;
        default:
          jj_la1[134] = jj_gen;
          ;
        }
        break;
      case SET:
        v = jj_consume_token(SET);
                             jjtn000.addToken(v.image);
        jj_consume_token(BRACKET_OPEN);
        label_49:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case ENUM:
          case FLOAT:
          case INT:
          case RECORD:
          case SEQUENCE:
          case SET:
          case STRING:
          case ANY:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[135] = jj_gen;
            break label_49;
          }
          PropertyTypeDescription();
        }
        jj_consume_token(BRACKET_CLOSE);
        break;
      case SEQUENCE:
        v = jj_consume_token(SEQUENCE);
                                  jjtn000.addToken(v.image);
        jj_consume_token(97);
        label_50:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case ENUM:
          case FLOAT:
          case INT:
          case RECORD:
          case SEQUENCE:
          case SET:
          case STRING:
          case ANY:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[136] = jj_gen;
            break label_50;
          }
          PropertyTypeDescription();
        }
        jj_consume_token(98);
        break;
      case RECORD:
        v = jj_consume_token(RECORD);
                                jjtn000.addToken(v.image);
        jj_consume_token(99);
        label_51:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[137] = jj_gen;
            break label_51;
          }
          parse_RecordFieldDescription();
          jj_consume_token(94);
        }
        jj_consume_token(100);
        break;
      case IDENTIFIER:
        v = jj_consume_token(IDENTIFIER);
                                    jjtn000.addToken(v.image);
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(94);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PropertyTypeDescription() throws ParseException {
                                /*@bgen(jjtree) PropertyTypeDescription */
                                ASTPropertyTypeDescription jjtn000 = new ASTPropertyTypeDescription(JJTPROPERTYTYPEDESCRIPTION);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token s, u, v;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
        s = jj_consume_token(ANY);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.addToken(s.image);
        break;
      case INT:
        s = jj_consume_token(INT);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.addToken(s.image);
        break;
      case FLOAT:
        s = jj_consume_token(FLOAT);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.addToken(s.image);
        break;
      case STRING:
        s = jj_consume_token(STRING);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.addToken(s.image);
        break;
      case BOOLEAN:
        s = jj_consume_token(BOOLEAN);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.addToken(s.image);
        break;
      case SET:
        s = jj_consume_token(SET);
                     jjtn000.addToken(s.image);
        jj_consume_token(BRACKET_OPEN);
        label_52:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case ENUM:
          case FLOAT:
          case INT:
          case RECORD:
          case SEQUENCE:
          case SET:
          case STRING:
          case ANY:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[139] = jj_gen;
            break label_52;
          }
          PropertyTypeDescription();
        }
        jj_consume_token(BRACKET_CLOSE);
        break;
      case SEQUENCE:
        s = jj_consume_token(SEQUENCE);
                          jjtn000.addToken(s.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 97:
          jj_consume_token(97);
          label_53:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BOOLEAN:
            case ENUM:
            case FLOAT:
            case INT:
            case RECORD:
            case SEQUENCE:
            case SET:
            case STRING:
            case ANY:
            case IDENTIFIER:
              ;
              break;
            default:
              jj_la1[141] = jj_gen;
              break label_53;
            }
            PropertyTypeDescription();
          }
          jj_consume_token(98);
          break;
        default:
          jj_la1[142] = jj_gen;
          ;
        }
        break;
      case RECORD:
        s = jj_consume_token(RECORD);
                        jjtn000.addToken(s.image);
        jj_consume_token(99);
        label_54:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[143] = jj_gen;
            break label_54;
          }
          parse_RecordFieldDescription();
          jj_consume_token(94);
        }
        jj_consume_token(100);
        break;
      case ENUM:
        s = jj_consume_token(ENUM);
                      jjtn000.addToken(s.image);
        jj_consume_token(BRACKET_OPEN);
        label_55:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[144] = jj_gen;
            break label_55;
          }
          u = jj_consume_token(IDENTIFIER);
                                                                           jjtn000.addToken(u.image);
          label_56:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 96:
              ;
              break;
            default:
              jj_la1[145] = jj_gen;
              break label_56;
            }
            jj_consume_token(96);
            v = jj_consume_token(IDENTIFIER);
                                                                                                                               jjtn000.addToken(v.image);
          }
        }
        jj_consume_token(BRACKET_CLOSE);
        break;
      case IDENTIFIER:
        lookup_TypeByName();
        break;
      default:
        jj_la1[146] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void parse_RecordFieldDescription() throws ParseException {
                                     /*@bgen(jjtree) parse_RecordFieldDescription */
                                     ASTparse_RecordFieldDescription jjtn000 = new ASTparse_RecordFieldDescription(JJTPARSE_RECORDFIELDDESCRIPTION);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      t = jj_consume_token(IDENTIFIER);
                      jjtn000.addToken(t.image);
      label_57:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 96:
          ;
          break;
        default:
          jj_la1[147] = jj_gen;
          break label_57;
        }
        jj_consume_token(96);
        s = jj_consume_token(IDENTIFIER);
                                                                          jjtn000.addToken(s.image);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        PropertyTypeDescription();
        break;
      default:
        jj_la1[148] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PropertyValueDeclaration(String type, int index) throws ParseException {
                                                        /*@bgen(jjtree) PropertyValueDeclaration */
                                                        ASTPropertyValueDeclaration jjtn000 = new ASTPropertyValueDeclaration(JJTPROPERTYVALUEDECLARATION);
                                                        boolean jjtc000 = true;
                                                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.addToken(t.image); if(index != -1) {if(type.equals("Comp")) components.get(index).addValue(t.image); else connectors.get(index).addValue(t.image);}
        break;
      case FLOATING_POINT_LITERAL:
        t = jj_consume_token(FLOATING_POINT_LITERAL);
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                    jjtn000.addToken(t.image); if(index != -1) {if(type.equals("Comp")) components.get(index).addValue(t.image); else connectors.get(index).addValue(t.image);}
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.addToken(t.image); if(index != -1) {if(type.equals("Comp")) components.get(index).addValue(t.image); else connectors.get(index).addValue(t.image);}
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.addToken(t.image); if(index != -1) {if(type.equals("Comp")) components.get(index).addValue(t.image); else connectors.get(index).addValue(t.image);}
        break;
      case TRUE:
        t = jj_consume_token(TRUE);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.addToken(t.image); if(index != -1) {if(type.equals("Comp")) components.get(index).addValue(t.image); else connectors.get(index).addValue(t.image);}
        break;
      case BRACKET_OPEN:
        AcmeSetValue(type, index);
        break;
      case 97:
        AcmeSequenceValue(type, index);
        break;
      case 99:
        AcmeRecordValue(type, index);
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.addToken(t.image); if(index != -1) {if(type.equals("Comp")) components.get(index).addValue(t.image); else connectors.get(index).addValue(t.image);}
        break;
      default:
        jj_la1[149] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AcmeSetValue(String type, int index) throws ParseException {
                                           /*@bgen(jjtree) AcmeSetValue */
  ASTAcmeSetValue jjtn000 = new ASTAcmeSetValue(JJTACMESETVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BRACKET_OPEN);
      label_58:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BRACKET_OPEN:
        case FALSE:
        case TRUE:
        case IDENTIFIER:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case 97:
        case 99:
          ;
          break;
        default:
          jj_la1[150] = jj_gen;
          break label_58;
        }
        PropertyValueDeclaration(type, index);
        label_59:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[151] = jj_gen;
            break label_59;
          }
          jj_consume_token(96);
          PropertyValueDeclaration(type, index);
        }
      }
      jj_consume_token(BRACKET_CLOSE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AcmeSequenceValue(String type, int index) throws ParseException {
                                                /*@bgen(jjtree) AcmeSequenceValue */
  ASTAcmeSequenceValue jjtn000 = new ASTAcmeSequenceValue(JJTACMESEQUENCEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(97);
      label_60:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BRACKET_OPEN:
        case FALSE:
        case TRUE:
        case IDENTIFIER:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case 97:
        case 99:
          ;
          break;
        default:
          jj_la1[152] = jj_gen;
          break label_60;
        }
        PropertyValueDeclaration(type, index);
        label_61:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[153] = jj_gen;
            break label_61;
          }
          jj_consume_token(96);
          PropertyValueDeclaration(type, index);
        }
      }
      jj_consume_token(98);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AcmeRecordValue(String type, int index) throws ParseException {
                                              /*@bgen(jjtree) AcmeRecordValue */
  ASTAcmeRecordValue jjtn000 = new ASTAcmeRecordValue(JJTACMERECORDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(99);
      label_62:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[154] = jj_gen;
          break label_62;
        }
        RecordFieldValue(type, index);
        jj_consume_token(94);
      }
      jj_consume_token(100);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RecordFieldValue(String type, int index) throws ParseException {
                                               /*@bgen(jjtree) RecordFieldValue */
                                               ASTRecordFieldValue jjtn000 = new ASTRecordFieldValue(JJTRECORDFIELDVALUE);
                                               boolean jjtc000 = true;
                                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                      jjtn000.addToken(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        PropertyTypeDescription();
        break;
      default:
        jj_la1[155] = jj_gen;
        ;
      }
      jj_consume_token(95);
      PropertyValueDeclaration(type, index);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RepresentationDeclaration() throws ParseException {
                                  /*@bgen(jjtree) RepresentationDeclaration */
                                  ASTRepresentationDeclaration jjtn000 = new ASTRepresentationDeclaration(JJTREPRESENTATIONDECLARATION);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      t = jj_consume_token(REPRESENTATION);
                          jjtn000.addToken(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        s = jj_consume_token(IDENTIFIER);
                                                                          jjtn000.addToken(s.image);
        jj_consume_token(95);
        break;
      default:
        jj_la1[156] = jj_gen;
        ;
      }
      jj_consume_token(BRACKET_OPEN);
      SystemDeclaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BINDINGS:
        BindingsMapDeclaration();
        break;
      default:
        jj_la1[157] = jj_gen;
        ;
      }
      jj_consume_token(BRACKET_CLOSE);
      jj_consume_token(94);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BindingsMapDeclaration() throws ParseException {
                               /*@bgen(jjtree) BindingsMapDeclaration */
                               ASTBindingsMapDeclaration jjtn000 = new ASTBindingsMapDeclaration(JJTBINDINGSMAPDECLARATION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BINDINGS);
                    jjtn000.addToken(t.image);
      jj_consume_token(BRACKET_OPEN);
      label_63:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[158] = jj_gen;
          break label_63;
        }
        BindingDeclaration();
      }
      jj_consume_token(BRACKET_CLOSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[159] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BindingDeclaration() throws ParseException {
                           /*@bgen(jjtree) BindingDeclaration */
                           ASTBindingDeclaration jjtn000 = new ASTBindingDeclaration(JJTBINDINGDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t, s, u, v, w;
    try {
      t = jj_consume_token(IDENTIFIER);
                        jjtn000.addToken(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 90:
        jj_consume_token(90);
        s = jj_consume_token(IDENTIFIER);
                                                                            jjtn000.addToken(s.image);
        break;
      default:
        jj_la1[160] = jj_gen;
        ;
      }
      u = jj_consume_token(TO);
                                                                                                                       jjtn000.addToken(u.image);
      v = jj_consume_token(IDENTIFIER);
                                                                                                                                                                       jjtn000.addToken(v.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 90:
        jj_consume_token(90);
        w = jj_consume_token(IDENTIFIER);
                                                                                                                                                                                                                           jjtn000.addToken(w.image);
        break;
      default:
        jj_la1[161] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BRACKET_OPEN:
        jj_consume_token(BRACKET_OPEN);
        label_64:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROPERTIES:
          case PROPERTY:
            ;
            break;
          default:
            jj_la1[162] = jj_gen;
            break label_64;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROPERTY:
            PropertyDeclaration(-1, "");
            break;
          case PROPERTIES:
            PropertiesBlock(-1, "");
            break;
          default:
            jj_la1[163] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(BRACKET_CLOSE);
        break;
      default:
        jj_la1[164] = jj_gen;
        ;
      }
      jj_consume_token(94);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DesignAnalysisDeclaration() throws ParseException {
                                  /*@bgen(jjtree) DesignAnalysisDeclaration */
                                  ASTDesignAnalysisDeclaration jjtn000 = new ASTDesignAnalysisDeclaration(JJTDESIGNANALYSISDECLARATION);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t, s, u, v, w;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTERNAL:
        t = jj_consume_token(EXTERNAL);
                        jjtn000.addToken(t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DESIGN:
          s = jj_consume_token(DESIGN);
                                                                    jjtn000.addToken(s.image);
          break;
        default:
          jj_la1[165] = jj_gen;
          ;
        }
        u = jj_consume_token(ANALYSIS);
                                                                                                                   jjtn000.addToken(u.image);
        v = jj_consume_token(IDENTIFIER);
                                                                                                                                                                 jjtn000.addToken(v.image); table.addSymbol(u.image, v.image);
        jj_consume_token(101);
        FormalParams();
        jj_consume_token(102);
        jj_consume_token(91);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case ENUM:
        case FLOAT:
        case INT:
        case RECORD:
        case SEQUENCE:
        case SET:
        case STRING:
        case ANY:
        case IDENTIFIER:
          PropertyTypeDescription();
          break;
        case COMPONENT:
          w = jj_consume_token(COMPONENT);
                       jjtn000.addToken(w.image);
          break;
        case GROUP:
          w = jj_consume_token(GROUP);
                   jjtn000.addToken(w.image);
          break;
        case CONNECTOR:
          w = jj_consume_token(CONNECTOR);
                       jjtn000.addToken(w.image);
          break;
        case PORT:
          w = jj_consume_token(PORT);
                  jjtn000.addToken(w.image);
          break;
        case ROLE:
          w = jj_consume_token(ROLE);
                  jjtn000.addToken(w.image);
          break;
        case SYSTEM:
          w = jj_consume_token(SYSTEM);
                   jjtn000.addToken(w.image);
          break;
        case ELEMENT:
          w = jj_consume_token(ELEMENT);
                     jjtn000.addToken(w.image);
          break;
        case TYPE:
          w = jj_consume_token(TYPE);
                  jjtn000.addToken(w.image);
          break;
        default:
          jj_la1[166] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(95);
        JavaMethodCallExpr();
        jj_consume_token(94);
        break;
      case INVARIANT:
      case ANALYSIS:
      case DESIGN:
      case HEURISTIC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANALYSIS:
        case DESIGN:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DESIGN:
            t = jj_consume_token(DESIGN);
                        jjtn000.addToken(t.image);
            break;
          default:
            jj_la1[167] = jj_gen;
            ;
          }
          s = jj_consume_token(ANALYSIS);
                                                                      jjtn000.addToken(s.image);
          u = jj_consume_token(IDENTIFIER);
                                                                                                                    jjtn000.addToken(u.image);
          jj_consume_token(101);
          FormalParams();
          jj_consume_token(102);
          jj_consume_token(91);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case ENUM:
          case FLOAT:
          case INT:
          case RECORD:
          case SEQUENCE:
          case SET:
          case STRING:
          case ANY:
          case IDENTIFIER:
            PropertyTypeDescription();
            break;
          case COMPONENT:
            v = jj_consume_token(COMPONENT);
                       jjtn000.addToken(v.image);
            break;
          case GROUP:
            v = jj_consume_token(GROUP);
                   jjtn000.addToken(v.image);
            break;
          case CONNECTOR:
            v = jj_consume_token(CONNECTOR);
                       jjtn000.addToken(v.image);
            break;
          case PORT:
            v = jj_consume_token(PORT);
                  jjtn000.addToken(v.image);
            break;
          case ROLE:
            v = jj_consume_token(ROLE);
                  jjtn000.addToken(v.image);
            break;
          case SYSTEM:
            v = jj_consume_token(SYSTEM);
                    jjtn000.addToken(v.image);
            break;
          case ELEMENT:
            v = jj_consume_token(ELEMENT);
                     jjtn000.addToken(v.image);
            break;
          case TYPE:
            v = jj_consume_token(TYPE);
                  jjtn000.addToken(v.image);
            break;
          default:
            jj_la1[168] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(95);
          DesignRuleExpression();
          jj_consume_token(94);
          break;
        case INVARIANT:
        case HEURISTIC:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INVARIANT:
            t = jj_consume_token(INVARIANT);
                                                                                                   jjtn000.addToken(t.image);
            break;
          case HEURISTIC:
            t = jj_consume_token(HEURISTIC);
                           jjtn000.addToken(t.image);
            break;
          default:
            jj_la1[169] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          DesignRuleExpression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROPBEGIN:
            s = jj_consume_token(PROPBEGIN);
                                                                                                  jjtn000.addToken(s.image);
            label_65:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case PROPERTY:
              case PROPBEGIN:
              case IDENTIFIER:
                ;
                break;
              default:
                jj_la1[170] = jj_gen;
                break label_65;
              }
              parse_PropertyDescription(-1, "");
              jj_consume_token(94);
            }
            u = jj_consume_token(PROPEND);
                                                                                                                                                                                      jjtn000.addToken(u.image);
            break;
          default:
            jj_la1[171] = jj_gen;
            ;
          }
          jj_consume_token(94);
          break;
        default:
          jj_la1[172] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[173] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void parse_DesignRule() throws ParseException {
                         /*@bgen(jjtree) parse_DesignRule */
                         ASTparse_DesignRule jjtn000 = new ASTparse_DesignRule(JJTPARSE_DESIGNRULE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t, s, u, v;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESIGN:
        t = jj_consume_token(DESIGN);
                   jjtn000.addToken(t.image);
        break;
      default:
        jj_la1[174] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INVARIANT:
        s = jj_consume_token(INVARIANT);
                                                                     jjtn000.addToken(s.image);
        break;
      case HEURISTIC:
        s = jj_consume_token(HEURISTIC);
                           jjtn000.addToken(s.image);
        break;
      default:
        jj_la1[175] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      DesignRuleExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROPBEGIN:
        u = jj_consume_token(PROPBEGIN);
                                                                                                  jjtn000.addToken(u.image);
        label_66:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROPERTY:
          case PROPBEGIN:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[176] = jj_gen;
            break label_66;
          }
          parse_PropertyDescription(-1, "");
          jj_consume_token(94);
        }
        v = jj_consume_token(PROPEND);
                                                                                                                                                                                     jjtn000.addToken(v.image);
        break;
      default:
        jj_la1[177] = jj_gen;
        ;
      }
      jj_consume_token(94);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void DesignRuleExpression() throws ParseException {
                             /*@bgen(jjtree) DesignRuleExpression */
  ASTDesignRuleExpression jjtn000 = new ASTDesignRuleExpression(JJTDESIGNRULEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXISTS:
      case FORALL:
        QuantifiedExpression();
        break;
      case BRACKET_OPEN:
      case BANG:
      case BOOLEAN:
      case COMPONENT:
      case CONNECTOR:
      case ENUM:
      case FALSE:
      case FLOAT:
      case GROUP:
      case INT:
      case MINUS:
      case PORT:
      case PROPERTY:
      case RECORD:
      case ROLE:
      case SEQUENCE:
      case SET:
      case STRING:
      case SYSTEM:
      case TRUE:
      case IDENTIFIER:
      case ELEMENT:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case 101:
        BooleanExpression();
        break;
      default:
        jj_la1[178] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void QuantifiedExpression() throws ParseException {
                             /*@bgen(jjtree) QuantifiedExpression */
                             ASTQuantifiedExpression jjtn000 = new ASTQuantifiedExpression(JJTQUANTIFIEDEXPRESSION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t, s, u, v, w;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FORALL:
        t = jj_consume_token(FORALL);
                      jjtn000.addToken(t.image);
        break;
      case EXISTS:
        t = jj_consume_token(EXISTS);
                                                                   jjtn000.addToken(t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNIQUE:
          s = jj_consume_token(UNIQUE);
                                                                                                                jjtn000.addToken(s.image);
          break;
        default:
          jj_la1[179] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[180] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      u = jj_consume_token(IDENTIFIER);
                      jjtn000.addToken(u.image); table.addSymbol(t.image, u.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SET_DECLARE:
      case 91:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 91:
          jj_consume_token(91);
          break;
        case SET_DECLARE:
          v = jj_consume_token(SET_DECLARE);
                                jjtn000.addToken(v.image);
          break;
        default:
          jj_la1[181] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_9(3)) {
          Type();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case COMPONENT:
          case CONNECTOR:
          case ENUM:
          case FLOAT:
          case GROUP:
          case INT:
          case PORT:
          case PROPERTY:
          case RECORD:
          case REPRESENTATION:
          case ROLE:
          case SEQUENCE:
          case SET:
          case STRING:
          case SYSTEM:
          case ANY:
          case IDENTIFIER:
            lookup_arbitraryTypeByName();
            break;
          default:
            jj_la1[182] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[183] = jj_gen;
        ;
      }
      w = jj_consume_token(IN);
              jjtn000.addToken(w.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BRACKET_OPEN:
        SetExpression();
        break;
      case IDENTIFIER:
        Reference();
        break;
      default:
        jj_la1[184] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(103);
      DesignRuleExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BooleanExpression() throws ParseException {
                           /*@bgen(jjtree) BooleanExpression */
                           ASTBooleanExpression jjtn000 = new ASTBooleanExpression(JJTBOOLEANEXPRESSION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      OrExpression();
      label_67:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[185] = jj_gen;
          break label_67;
        }
        t = jj_consume_token(AND);
                                jjtn000.addToken(t.image);
        OrExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void OrExpression() throws ParseException {
                      /*@bgen(jjtree) OrExpression */
                      ASTOrExpression jjtn000 = new ASTOrExpression(JJTOREXPRESSION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      ImpliesExpression();
      label_68:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[186] = jj_gen;
          break label_68;
        }
        t = jj_consume_token(OR);
                                    jjtn000.addToken(t.image);
        ImpliesExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ImpliesExpression() throws ParseException {
                           /*@bgen(jjtree) ImpliesExpression */
                           ASTImpliesExpression jjtn000 = new ASTImpliesExpression(JJTIMPLIESEXPRESSION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      IffExpression();
      label_69:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPLIES:
          ;
          break;
        default:
          jj_la1[187] = jj_gen;
          break label_69;
        }
        t = jj_consume_token(IMPLIES);
                                     jjtn000.addToken(t.image);
        IffExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IffExpression() throws ParseException {
                      /*@bgen(jjtree) IffExpression */
                      ASTIffExpression jjtn000 = new ASTIffExpression(JJTIFFEXPRESSION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      EqualityExpression();
      label_70:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IFF:
          ;
          break;
        default:
          jj_la1[188] = jj_gen;
          break label_70;
        }
        t = jj_consume_token(IFF);
                                      jjtn000.addToken(t.image);
        EqualityExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
                            /*@bgen(jjtree) EqualityExpression */
                            ASTEqualityExpression jjtn000 = new ASTEqualityExpression(JJTEQUALITYEXPRESSION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      RelationalExpression();
      label_71:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NE:
          ;
          break;
        default:
          jj_la1[189] = jj_gen;
          break label_71;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          t = jj_consume_token(EQ);
                                       jjtn000.addToken(t.image);
          RelationalExpression();
          break;
        case NE:
          t = jj_consume_token(NE);
                                                                                                       jjtn000.addToken(t.image);
          RelationalExpression();
          break;
        default:
          jj_la1[190] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
                              /*@bgen(jjtree) RelationalExpression */
                              ASTRelationalExpression jjtn000 = new ASTRelationalExpression(JJTRELATIONALEXPRESSION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      AdditiveExpression();
      label_72:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GE:
        case LE:
        case 97:
        case 98:
          ;
          break;
        default:
          jj_la1[191] = jj_gen;
          break label_72;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 97:
          jj_consume_token(97);
          AdditiveExpression();
          break;
        case 98:
          jj_consume_token(98);
          AdditiveExpression();
          break;
        case LE:
          t = jj_consume_token(LE);
                                                                                            jjtn000.addToken(t.image);
          AdditiveExpression();
          break;
        case GE:
          t = jj_consume_token(GE);
                                                                                                                                                         jjtn000.addToken(t.image);
          AdditiveExpression();
          break;
        default:
          jj_la1[192] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
                           /*@bgen(jjtree) AdditiveExpression */
                           ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      MultiplicativeExpression();
      label_73:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case PLUS:
          ;
          break;
        default:
          jj_la1[193] = jj_gen;
          break label_73;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          t = jj_consume_token(PLUS);
                                             jjtn000.addToken(t.image);
          MultiplicativeExpression();
          break;
        case MINUS:
          t = jj_consume_token(MINUS);
                                                                                                                    jjtn000.addToken(t.image);
          MultiplicativeExpression();
          break;
        default:
          jj_la1[194] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
                                 /*@bgen(jjtree) MultiplicativeExpression */
                                 ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      UnaryExpression();
      label_74:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REM:
        case SLASH:
        case STAR:
          ;
          break;
        default:
          jj_la1[195] = jj_gen;
          break label_74;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          t = jj_consume_token(STAR);
                                   jjtn000.addToken(t.image);
          UnaryExpression();
          break;
        case SLASH:
          t = jj_consume_token(SLASH);
                                                                                                 jjtn000.addToken(t.image);
          UnaryExpression();
          break;
        case REM:
          t = jj_consume_token(REM);
                                                                                                                                                             jjtn000.addToken(t.image);
          UnaryExpression();
          break;
        default:
          jj_la1[196] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
                        /*@bgen(jjtree) UnaryExpression */
                        ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
        t = jj_consume_token(BANG);
                jjtn000.addToken(t.image);
        UnaryExpression();
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
                   jjtn000.addToken(t.image);
        UnaryExpression();
        break;
      case BRACKET_OPEN:
      case BOOLEAN:
      case COMPONENT:
      case CONNECTOR:
      case ENUM:
      case FALSE:
      case FLOAT:
      case GROUP:
      case INT:
      case PORT:
      case PROPERTY:
      case RECORD:
      case ROLE:
      case SEQUENCE:
      case SET:
      case STRING:
      case SYSTEM:
      case TRUE:
      case IDENTIFIER:
      case ELEMENT:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case 101:
        PrimitiveExpression();
        break;
      default:
        jj_la1[197] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PrimitiveExpression() throws ParseException {
                            /*@bgen(jjtree) PrimitiveExpression */
  ASTPrimitiveExpression jjtn000 = new ASTPrimitiveExpression(JJTPRIMITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        jj_consume_token(101);
        DesignRuleExpression();
        jj_consume_token(102);
        break;
      case BOOLEAN:
      case COMPONENT:
      case CONNECTOR:
      case ENUM:
      case FALSE:
      case FLOAT:
      case GROUP:
      case INT:
      case PORT:
      case PROPERTY:
      case RECORD:
      case ROLE:
      case SEQUENCE:
      case SET:
      case STRING:
      case SYSTEM:
      case TRUE:
      case ELEMENT:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
        LiteralConstant();
        break;
      case IDENTIFIER:
        Reference();
        break;
      case BRACKET_OPEN:
        SetExpression();
        break;
      default:
        jj_la1[198] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Reference() throws ParseException {
                  /*@bgen(jjtree) Reference */
                  ASTReference jjtn000 = new ASTReference(JJTREFERENCE);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtn000.addToken(t.image);
      label_75:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 90:
          ;
          break;
        default:
          jj_la1[199] = jj_gen;
          break label_75;
        }
        jj_consume_token(90);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          s = jj_consume_token(IDENTIFIER);
                        jjtn000.addToken(s.image);
          break;
        case TYPE:
          s = jj_consume_token(TYPE);
                  jjtn000.addToken(s.image);
          break;
        case COMPONENTS:
          s = jj_consume_token(COMPONENTS);
                        jjtn000.addToken(s.image);
          break;
        case CONNECTORS:
          s = jj_consume_token(CONNECTORS);
                         jjtn000.addToken(s.image);
          break;
        case PORTS:
          s = jj_consume_token(PORTS);
                   jjtn000.addToken(s.image);
          break;
        case ROLES:
          s = jj_consume_token(ROLES);
                   jjtn000.addToken(s.image);
          break;
        case MEMBERS:
          s = jj_consume_token(MEMBERS);
                     jjtn000.addToken(s.image);
          break;
        case PROPERTIES:
          s = jj_consume_token(PROPERTIES);
                        jjtn000.addToken(s.image);
          break;
        case REPRESENTATIONS:
          s = jj_consume_token(REPRESENTATIONS);
                             jjtn000.addToken(s.image);
          break;
        case ATTACHEDPORTS:
          s = jj_consume_token(ATTACHEDPORTS);
                           jjtn000.addToken(s.image);
          break;
        case ATTACHEDROLES:
          s = jj_consume_token(ATTACHEDROLES);
                           jjtn000.addToken(s.image);
          break;
        default:
          jj_la1[200] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        jj_consume_token(101);
        ActualParams();
        jj_consume_token(102);
        break;
      default:
        jj_la1[201] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void JavaMethodCallExpr() throws ParseException {
                           /*@bgen(jjtree) JavaMethodCallExpr */
                           ASTJavaMethodCallExpr jjtn000 = new ASTJavaMethodCallExpr(JJTJAVAMETHODCALLEXPR);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      t = jj_consume_token(IDENTIFIER);
                      jjtn000.addToken(t.image);
      label_76:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 90:
          ;
          break;
        default:
          jj_la1[202] = jj_gen;
          break label_76;
        }
        jj_consume_token(90);
        s = jj_consume_token(IDENTIFIER);
                                                                          jjtn000.addToken(s.image);
      }
      jj_consume_token(101);
      ActualParams();
      jj_consume_token(102);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LiteralConstant() throws ParseException {
                        /*@bgen(jjtree) LiteralConstant */
                        ASTLiteralConstant jjtn000 = new ASTLiteralConstant(JJTLITERALCONSTANT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.addToken(t.image);
        break;
      case FLOATING_POINT_LITERAL:
        t = jj_consume_token(FLOATING_POINT_LITERAL);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                      jjtn000.addToken(t.image);
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.addToken(t.image);
        break;
      case TRUE:
        t = jj_consume_token(TRUE);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.addToken(t.image);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.addToken(t.image);
        break;
      case COMPONENT:
        t = jj_consume_token(COMPONENT);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.addToken(t.image);
        break;
      case GROUP:
        t = jj_consume_token(GROUP);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.addToken(t.image);
        break;
      case CONNECTOR:
        t = jj_consume_token(CONNECTOR);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.addToken(t.image);
        break;
      case PORT:
        t = jj_consume_token(PORT);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.addToken(t.image);
        break;
      case ROLE:
        t = jj_consume_token(ROLE);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.addToken(t.image);
        break;
      case SYSTEM:
        t = jj_consume_token(SYSTEM);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.addToken(t.image);
        break;
      case ELEMENT:
        t = jj_consume_token(ELEMENT);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.addToken(t.image);
        break;
      case PROPERTY:
        t = jj_consume_token(PROPERTY);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.addToken(t.image);
        break;
      case INT:
        t = jj_consume_token(INT);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.addToken(t.image);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.addToken(t.image);
        break;
      case STRING:
        t = jj_consume_token(STRING);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.addToken(t.image);
        break;
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.addToken(t.image);
        break;
      case ENUM:
        t = jj_consume_token(ENUM);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.addToken(t.image);
        break;
      case SET:
        t = jj_consume_token(SET);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.addToken(t.image);
        break;
      case SEQUENCE:
        t = jj_consume_token(SEQUENCE);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.addToken(t.image);
        break;
      case RECORD:
        t = jj_consume_token(RECORD);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.addToken(t.image);
        break;
      default:
        jj_la1[203] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ActualParams() throws ParseException {
                      /*@bgen(jjtree) ActualParams */
  ASTActualParams jjtn000 = new ASTActualParams(JJTACTUALPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BRACKET_OPEN:
      case BANG:
      case BOOLEAN:
      case COMPONENT:
      case CONNECTOR:
      case ENUM:
      case EXISTS:
      case FALSE:
      case FLOAT:
      case FORALL:
      case GROUP:
      case INT:
      case MINUS:
      case PORT:
      case PROPERTY:
      case RECORD:
      case ROLE:
      case SEQUENCE:
      case SET:
      case STRING:
      case SYSTEM:
      case TRUE:
      case IDENTIFIER:
      case ELEMENT:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case 101:
        ActualParam();
        label_77:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[204] = jj_gen;
            break label_77;
          }
          jj_consume_token(96);
          ActualParam();
        }
        break;
      default:
        jj_la1[205] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FormalParams() throws ParseException {
                      /*@bgen(jjtree) FormalParams */
  ASTFormalParams jjtn000 = new ASTFormalParams(JJTFORMALPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        FormalParam();
        label_78:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            ;
            break;
          default:
            jj_la1[206] = jj_gen;
            break label_78;
          }
          jj_consume_token(96);
          FormalParam();
        }
        break;
      default:
        jj_la1[207] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ActualParam() throws ParseException {
                     /*@bgen(jjtree) ActualParam */
  ASTActualParam jjtn000 = new ASTActualParam(JJTACTUALPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DesignRuleExpression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FormalParam() throws ParseException {
                     /*@bgen(jjtree) FormalParam */
                     ASTFormalParam jjtn000 = new ASTFormalParam(JJTFORMALPARAM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t, s, u;
    try {
      t = jj_consume_token(IDENTIFIER);
                      jjtn000.addToken(t.image);
      label_79:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 96:
          ;
          break;
        default:
          jj_la1[208] = jj_gen;
          break label_79;
        }
        jj_consume_token(96);
        s = jj_consume_token(IDENTIFIER);
                                                                           jjtn000.addToken(s.image);
      }
      jj_consume_token(91);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELEMENT:
        u = jj_consume_token(ELEMENT);
                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                 jjtc000 = false;
                                                                                                                                jjtn000.addToken(u.image);
        break;
      case SYSTEM:
        u = jj_consume_token(SYSTEM);
                                                                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                              jjtc000 = false;
                                                                                                                                                                             jjtn000.addToken(u.image);
        break;
      case COMPONENT:
        u = jj_consume_token(COMPONENT);
                                                                                                                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                              jjtc000 = false;
                                                                                                                                                                                                                             jjtn000.addToken(u.image);
        break;
      case CONNECTOR:
        u = jj_consume_token(CONNECTOR);
                                                                                                                                                                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                              jjtc000 = false;
                                                                                                                                                                                                                                                                             jjtn000.addToken(u.image);
        break;
      case PORT:
        u = jj_consume_token(PORT);
                                                                                                                                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                         jjtc000 = false;
                                                                                                                                                                                                                                                                                                                        jjtn000.addToken(u.image);
        break;
      case ROLE:
        u = jj_consume_token(ROLE);
                                                                                                                                                                                                                                                                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                   jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                  jjtn000.addToken(u.image);
        break;
      case TYPE:
        u = jj_consume_token(TYPE);
                                                                                                                                                                                                                                                                                                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                              jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                             jjtn000.addToken(u.image);
        break;
      case PROPERTY:
        u = jj_consume_token(PROPERTY);
                                                                                                                                                                                                                                                                                                                                                                                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                            jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                           jjtn000.addToken(u.image);
        break;
      case REPRESENTATION:
        u = jj_consume_token(REPRESENTATION);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                jjtn000.addToken(u.image);
        break;
      case BOOLEAN:
      case ENUM:
      case FLOAT:
      case INT:
      case RECORD:
      case SEQUENCE:
      case SET:
      case STRING:
      case ANY:
      case IDENTIFIER:
        PropertyTypeDescription();
        break;
      default:
        jj_la1[209] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SetExpression() throws ParseException {
                       /*@bgen(jjtree) SetExpression */
  ASTSetExpression jjtn000 = new ASTSetExpression(JJTSETEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BRACKET_OPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case COMPONENT:
      case CONNECTOR:
      case ENUM:
      case FALSE:
      case FLOAT:
      case GROUP:
      case INT:
      case PORT:
      case PROPERTY:
      case RECORD:
      case ROLE:
      case SEQUENCE:
      case SET:
      case STRING:
      case SYSTEM:
      case TRUE:
      case IDENTIFIER:
      case ELEMENT:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
        LiteralSet();
        break;
      case SELECT:
      case COLLECT:
        SetConstructor();
        break;
      default:
        jj_la1[210] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(BRACKET_CLOSE);
    } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  final public void LiteralSet() throws ParseException {
                    /*@bgen(jjtree) LiteralSet */
  ASTLiteralSet jjtn000 = new ASTLiteralSet(JJTLITERALSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case COMPONENT:
      case CONNECTOR:
      case ENUM:
      case FALSE:
      case FLOAT:
      case GROUP:
      case INT:
      case PORT:
      case PROPERTY:
      case RECORD:
      case ROLE:
      case SEQUENCE:
      case SET:
      case STRING:
      case SYSTEM:
      case TRUE:
      case ELEMENT:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
        LiteralConstant();
        break;
      case IDENTIFIER:
        Reference();
        break;
      default:
        jj_la1[211] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_80:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 96:
          ;
          break;
        default:
          jj_la1[212] = jj_gen;
          break label_80;
        }
        jj_consume_token(96);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case COMPONENT:
        case CONNECTOR:
        case ENUM:
        case FALSE:
        case FLOAT:
        case GROUP:
        case INT:
        case PORT:
        case PROPERTY:
        case RECORD:
        case ROLE:
        case SEQUENCE:
        case SET:
        case STRING:
        case SYSTEM:
        case TRUE:
        case ELEMENT:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
          LiteralConstant();
          break;
        case IDENTIFIER:
          Reference();
          break;
        default:
          jj_la1[213] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SetConstructor() throws ParseException {
                        /*@bgen(jjtree) SetConstructor */
                        ASTSetConstructor jjtn000 = new ASTSetConstructor(JJTSETCONSTRUCTOR);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t, s, u, v;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        t = jj_consume_token(SELECT);
                    jjtn000.addToken(t.image);
        s = jj_consume_token(IDENTIFIER);
                                                                   jjtn000.addToken(s.image); table.addSymbol(s.image, t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 91:
          jj_consume_token(91);
          lookup_arbitraryTypeByName();
          break;
        default:
          jj_la1[214] = jj_gen;
          ;
        }
        u = jj_consume_token(IN);
                                                  jjtn000.addToken(u.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BRACKET_OPEN:
          SetExpression();
          break;
        case IDENTIFIER:
          Reference();
          break;
        default:
          jj_la1[215] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(103);
        DesignRuleExpression();
        break;
      case COLLECT:
        t = jj_consume_token(COLLECT);
                      jjtn000.addToken(t.image);
        s = jj_consume_token(IDENTIFIER);
                                                                     jjtn000.addToken(s.image); table.addSymbol(s.image, t.image);
        jj_consume_token(90);
        u = jj_consume_token(IDENTIFIER);
                           jjtn000.addToken(u.image);
        jj_consume_token(91);
        lookup_arbitraryTypeByName();
        jj_consume_token(90);
        lookup_arbitraryTypeByName();
        v = jj_consume_token(IN);
                                                                                                                                    jjtn000.addToken(v.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BRACKET_OPEN:
          SetExpression();
          break;
        case IDENTIFIER:
          Reference();
          break;
        default:
          jj_la1[216] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[217] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RecordType() throws ParseException {
                    /*@bgen(jjtree) RecordType */
                    ASTRecordType jjtn000 = new ASTRecordType(JJTRECORDTYPE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RECORD);
                  jjtn000.addToken (t.image);
      jj_consume_token(99);
      RecordItem();
      label_81:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 96:
          ;
          break;
        default:
          jj_la1[218] = jj_gen;
          break label_81;
        }
        jj_consume_token(96);
        RecordItem();
      }
      jj_consume_token(100);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RecordItem() throws ParseException {
                    /*@bgen(jjtree) RecordItem */
                    ASTRecordItem jjtn000 = new ASTRecordItem(JJTRECORDITEM);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                      jjtn000.addToken(t.image);
      jj_consume_token(91);
      Type();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SetType() throws ParseException {
                 /*@bgen(jjtree) SetType */
                 ASTSetType jjtn000 = new ASTSetType(JJTSETTYPE);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SET);
               jjtn000.addToken(t.image);
      jj_consume_token(BRACKET_OPEN);
      Type();
      jj_consume_token(BRACKET_CLOSE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SequenceType() throws ParseException {
                      /*@bgen(jjtree) SequenceType */
                      ASTSequenceType jjtn000 = new ASTSequenceType(JJTSEQUENCETYPE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SEQUENCE);
                    jjtn000.addToken(t.image);
      jj_consume_token(BRACKET_OPEN);
      Type();
      jj_consume_token(BRACKET_CLOSE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Signature() throws ParseException {
                   /*@bgen(jjtree) Signature */
  ASTSignature jjtn000 = new ASTSignature(JJTSIGNATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      jj_consume_token(104);
      Type();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Type() throws ParseException {
              /*@bgen(jjtree) Type */
              ASTType jjtn000 = new ASTType(JJTTYPE);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      t = jj_consume_token(IDENTIFIER);
                        jjtn000.addToken(t.image);
      label_82:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 90:
          ;
          break;
        default:
          jj_la1[219] = jj_gen;
          break label_82;
        }
        jj_consume_token(90);
        s = jj_consume_token(IDENTIFIER);
                                                                             jjtn000.addToken (s.image);
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PrimitiveType() throws ParseException {
                       /*@bgen(jjtree) PrimitiveType */
                       ASTPrimitiveType jjtn000 = new ASTPrimitiveType(JJTPRIMITIVETYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPONENT:
        t = jj_consume_token(COMPONENT);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.addToken(t.image);
        break;
      case GROUP:
        t = jj_consume_token(GROUP);
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                 jjtn000.addToken(t.image);
        break;
      case CONNECTOR:
        t = jj_consume_token(CONNECTOR);
                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                  jjtc000 = false;
                                                                                                                 jjtn000.addToken(t.image);
        break;
      case PORT:
        t = jj_consume_token(PORT);
                                                                                                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                             jjtc000 = false;
                                                                                                                                                            jjtn000.addToken(t.image);
        break;
      case ROLE:
        t = jj_consume_token(ROLE);
                                                                                                                                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                        jjtc000 = false;
                                                                                                                                                                                                       jjtn000.addToken(t.image);
        break;
      case SYSTEM:
        t = jj_consume_token(SYSTEM);
                                                                                                                                                                                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                     jjtc000 = false;
                                                                                                                                                                                                                                                    jjtn000.addToken(t.image);
        break;
      default:
        jj_la1[220] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Element() throws ParseException {
                 /*@bgen(jjtree) Element */
                 ASTElement jjtn000 = new ASTElement(JJTELEMENT);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                        jjtn000.addToken(t.image);
        label_83:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 90:
            ;
            break;
          default:
            jj_la1[221] = jj_gen;
            break label_83;
          }
          jj_consume_token(90);
          s = jj_consume_token(IDENTIFIER);
                                                                             jjtn000.addToken(s.image);
        }
        break;
      case BRACKET_OPEN:
      case 97:
      case 99:
        CompoundElement();
        break;
      default:
        jj_la1[222] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CompoundElement() throws ParseException {
                         /*@bgen(jjtree) CompoundElement */
  ASTCompoundElement jjtn000 = new ASTCompoundElement(JJTCOMPOUNDELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BRACKET_OPEN:
        Set();
        break;
      case 99:
        Record();
        break;
      case 97:
        Sequence();
        break;
      default:
        jj_la1[223] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Set() throws ParseException {
             /*@bgen(jjtree) Set */
  ASTSet jjtn000 = new ASTSet(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BRACKET_OPEN);
      Element();
      label_84:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 96:
          ;
          break;
        default:
          jj_la1[224] = jj_gen;
          break label_84;
        }
        jj_consume_token(96);
        Element();
      }
      jj_consume_token(BRACKET_CLOSE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Record() throws ParseException {
                /*@bgen(jjtree) Record */
                ASTRecord jjtn000 = new ASTRecord(JJTRECORD);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      jj_consume_token(99);
      t = jj_consume_token(IDENTIFIER);
                          jjtn000.addToken(t.image);
      jj_consume_token(95);
      Element();
      label_85:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 96:
          ;
          break;
        default:
          jj_la1[225] = jj_gen;
          break label_85;
        }
        jj_consume_token(96);
        s = jj_consume_token(IDENTIFIER);
                                                                                            jjtn000.addToken(s.image);
        jj_consume_token(95);
        Element();
      }
      jj_consume_token(100);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Sequence() throws ParseException {
                  /*@bgen(jjtree) Sequence */
  ASTSequence jjtn000 = new ASTSequence(JJTSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(97);
      Element();
      label_86:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 96:
          ;
          break;
        default:
          jj_la1[226] = jj_gen;
          break label_86;
        }
        jj_consume_token(96);
        Element();
      }
      jj_consume_token(98);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(ELEMENT)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(RECORD)) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_scan_token(SEQUENCE)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(SET)) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(ENUM)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(PROPERTY)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(ELEMENT)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(SYSTEM)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(ROLE)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(PORT)) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(CONNECTOR)) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(GROUP)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(UNIQUE)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(COMPONENT)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(98)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(BRACKET_OPEN)) return true;
    if (jj_scan_token(BRACKET_CLOSE)) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(101)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(PROPBEGIN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_144()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PROPEND)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(PROPERTY)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(91)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(90)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(PROPBEGIN)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_209()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(PROPERTY)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(97)) return true;
    return false;
  }

  private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(101)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_170()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(EXISTS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_170()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(PROPERTIES)) return true;
    if (jj_scan_token(BRACKET_OPEN)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(IFF)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_170()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(PROPERTY)) return true;
    if (jj_3R_121()) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_164()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_165()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(IMPLIES)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(INVARIANT)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(90)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(BRACKET_OPEN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BRACKET_CLOSE)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_158()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_159()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_156()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_157()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_155()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_3R_152()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_153()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_149()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_150()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(SYSTEM)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(HEURISTIC)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(DESIGN)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    if (jj_3R_127()) return true;
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(90)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(ROLE)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(PORT)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(CONNECTOR)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(COLLECT)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    return false;
  }

  private boolean jj_3R_213() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(REPRESENTATION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    if (jj_scan_token(BRACKET_OPEN)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(COMPONENT)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(BRACKET_OPEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public acmeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[227];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x82283000,0x80200000,0x200000,0x0,0x0,0x0,0x80000,0x82003300,0x82083300,0x40,0x2083000,0x0,0x40,0x0,0x2083000,0x0,0x80000000,0x0,0x40,0x40000,0x0,0x40,0x40000,0x0,0x40,0x40000,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x40,0x0,0x0,0x40,0x0,0x40,0x80000,0x0,0x0,0x0,0x42407800,0x0,0x0,0x0,0x0,0x0,0x82003300,0x40,0x40000,0x82003300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x40,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40404800,0x40404800,0x0,0x40404800,0x40404800,0x3000,0x40404800,0x0,0x0,0x0,0x0,0x40404800,0x0,0x0,0x100040,0x100040,0x0,0x100040,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x42407800,0x0,0x42407800,0x80000000,0x0,0x0,0x80000000,0x80000000,0x0,0x80000000,0x0,0x0,0x42d17c40,0x0,0x810000,0x0,0x42407800,0x0,0x40,0x20,0x0,0x8000000,0x4000000,0x8000,0x8000,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x42507c40,0x42507840,0x0,0x0,0x0,0x0,0x42507800,0x0,0x42d17c40,0x0,0x0,0x0,0x40407800,0x42507800,0x42507800,0x0,0x42507800,0x0,0x40,0x40,0x0,0x0,0x0,0x2003000,0x0,0x40,0x40,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1000,0x1000,0x101044,0x101044,0x101044,0x0,0x1000,0x21808680,0x21800600,0x800000,0x0,0x0,0x0,0x0,0x2001a780,0x2001a780,0x0,0x8480,0x0,0x10,0x0,0x8080,0x0,0x2602,0x2,0x10,0x0,0x0,0x10,0x0,0x0,0x10,0x0,0x0,0x0,0x780,0x780,0x0,0x0,0x2,0x2,0x0,0x0,0x18600,0x18600,0x0,0x0,0x10,0x0,0x10,0x0,0x0,0x0,0x0,0x414cac80,0x0,0x0,0x0,0x0,0x0,0x2001a780,0x10,0x0,0x2001a780,0x2600,0x2600,0x0,0x0,0x10,0x0,0x0,0x0,0x10,0x780,0x0,0x0,0x0,0x0,0x780,0x0,0x0,0x780,0x600,0x0,0x0,0x10,0x18600,0x0,0x0,0x0,0x0,0x18600,0x0,0x0,0x18600,0x600,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2600,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2600,0x0,0x600,0x600,0x0,0x0,0x600,0x600,0x0,0x0,0x400,0x400,0x0,0x0,0x400,0x400,0x0,0x0,0x404c0800,0x404c0800,0x0,0x4c0800,0x404c0800,0x900a480,0x404c0800,0x0,0x0,0x0,0x0,0x404c0800,0x0,0x0,0x2000000,0x2000000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600,0x600,0x0,0x0,0x494c8880,0x0,0x494c8880,0x0,0x400,0x0,0x20000000,0x20000000,0x0,0x0,0x400,0x0,0x34c8c84,0x4000000,0x0,0x0,0x414cac80,0x0,0x0,0x0,0x20,0x0,0x0,0x8,0x8,0x1,0x1,0x44,0x44,0x301000,0x301000,0x34c8c84,0x34c8c80,0x0,0x88014302,0x0,0x0,0x34c8c80,0x0,0x34c8c84,0x0,0x0,0x0,0x494cac80,0x34e8c80,0x34c8c80,0x0,0x34c8c80,0x0,0x0,0x0,0x20000,0x0,0x0,0x1008080,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x2000000,0x2000000,0x3e000000,0x3e000000,0x3e000000,0x0,0x3001000,0x2448,0x448,0x0,0x40000000,0x0,0x40000000,0xc0000000,0x54c,0x254c,0x0,0x2000,0x0,0x0,0x40000000,0x2000,0x0,0x48,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0xc0000000,0x0,0x0,0x40000000,0xc0000000,0x0,0x0,0x40000000,0xc0000000,0x0,0x0,0x40000000,0xc0000000,0x0,0x40000000,0x0,0xc0000000,0x40000000,0xc0000000,0x1000,0x1000,0x0,0x8000000,0x40000000,0xc0000000,0x0,0x54c,0x0,0x0,0x54c,0x0,0x0,0x0,0x8000000,0x0,0xc0000000,0x0,0x8000000,0x0,0x0,0xc0000000,0x1000,0x0,0x8000000,0x0,0xc0000000,0x40000000,0x0,0x0,0x0,0x8000000,0x0,0x0,0xc0000000,0x1000,0x0,0x8000000,0x0,0xc0000000,0x40000000,0x0,0x0,0x0,0x8000000,0x80000000,0x1000,0x0,0x8000000,0xc0000000,0xc8000000,0xc8000000,0x48,0x0,0x8000000,0xc0000000,0x1000,0x4000000,0x1000,0x0,0x8000000,0xc0000000,0xc8000000,0xc8000000,0x48,0x2000,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x1010,0x0,0x8000000,0x80000000,0x1010,0x1010,0x0,0x0,0x1000,0x1000,0x1000,0x1000,0x1000,0x2000,0x1000,0x0,0x1000,0x1000,0x0,0x1000,0x0,0x8000000,0x1045000,0x1045000,0x0,0x1045000,0x0,0x1000,0x8000000,0x1000,0x200,0x1000,0x40000000,0x4000000,0x4000000,0x0,0x0,0x0,0x8,0x3000,0x8,0x3000,0x40,0x1010,0x10,0x48,0x448,0x8,0x40,0x1010,0x10,0x1047000,0x0,0x0,0x8000080,0x1000,0x8000080,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1047000,0x1047000,0x4000000,0x1105,0x0,0x4000000,0x1046000,0x0,0x1047000,0x0,0x1000,0x0,0x3000,0x1047002,0x1047000,0x0,0x1047000,0x8000000,0x1000,0x1000,0x2,0x0,0x4000000,0x0,0x4000000,0x1000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x1,0x0,0x1,0x0,0xa,0xa,0x1,0xa,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x20,0x0,0x0,0x1,0x20,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xa,0xa,0x1,0x1,0x1,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public acmeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public acmeParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new acmeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 227; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 227; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public acmeParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new acmeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 227; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 227; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public acmeParser(acmeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 227; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(acmeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 227; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L; }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[105];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 227; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 105; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
