/* Generated By:JJTree&JavaCC: Do not edit this line. acmeParserTokenManager.java */
/** Token Manager. */
public class acmeParserTokenManager implements acmeParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 76;
            return 1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 76;
            return 29;
         }
         if ((active0 & 0x1fcfefb2fe003300L) != 0L || (active1 & 0x9feL) != 0L)
         {
            jjmatchedKind = 76;
            return 100;
         }
         if ((active0 & 0x900000L) != 0L)
         {
            jjmatchedKind = 76;
            return 33;
         }
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 76;
            return 17;
         }
         if ((active0 & 0xd0000L) != 0L || (active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 76;
            return 21;
         }
         if ((active1 & 0x4000000L) != 0L)
            return 39;
         return -1;
      case 1:
         if ((active0 & 0x9fcfef921ebd3300L) != 0L || (active1 & 0x7ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 1;
            }
            return 100;
         }
         if ((active0 & 0x6000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 1;
            }
            return 0;
         }
         if ((active0 & 0x20e0000000L) != 0L || (active1 & 0x800L) != 0L)
            return 100;
         return -1;
      case 2:
         if ((active0 & 0xbfc7ef829abd3300L) != 0L || (active1 & 0x77fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 2;
            }
            return 100;
         }
         if ((active0 & 0x4008001044000000L) != 0L || (active1 & 0x80L) != 0L)
            return 100;
         return -1;
      case 3:
         if ((active0 & 0xa5c66e029abd3300L) != 0L || (active1 & 0x7ffL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 3;
            }
            return 100;
         }
         if ((active0 & 0x1a01818000000000L) != 0L)
            return 100;
         return -1;
      case 4:
         if ((active0 & 0xa5466e0298ad3300L) != 0L || (active1 & 0x7ffL) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
            return 100;
         }
         if ((active0 & 0x81010002100000L) != 0L)
            return 100;
         return -1;
      case 5:
         if ((active0 & 0xa0046602880c3300L) != 0L || (active1 & 0x7f7L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
            return 100;
         }
         if ((active0 & 0x542080010a10000L) != 0L || (active1 & 0x8L) != 0L)
            return 100;
         return -1;
      case 6:
         if ((active0 & 0xa004660080043300L) != 0L || (active1 & 0x7d5L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 6;
            return 100;
         }
         if ((active0 & 0x208080000L) != 0L || (active1 & 0x22L) != 0L)
            return 100;
         return -1;
      case 7:
         if ((active0 & 0x8000620080003300L) != 0L || (active1 & 0x1d5L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 7;
            return 100;
         }
         if ((active0 & 0x2004040000040000L) != 0L || (active1 & 0x600L) != 0L)
            return 100;
         return -1;
      case 8:
         if ((active0 & 0x8000620000000300L) != 0L || (active1 & 0x185L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 8;
            return 100;
         }
         if ((active0 & 0x80003000L) != 0L || (active1 & 0x50L) != 0L)
            return 100;
         return -1;
      case 9:
         if ((active0 & 0x8000600000000000L) != 0L || (active1 & 0x81L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 9;
            }
            return 100;
         }
         if ((active0 & 0x20000000300L) != 0L || (active1 & 0x104L) != 0L)
            return 100;
         return -1;
      case 10:
         if ((active0 & 0x8000600000000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 10;
            return 100;
         }
         if ((active0 & 0x200L) != 0L || (active1 & 0x80L) != 0L)
            return 100;
         return -1;
      case 11:
         if ((active0 & 0x8000600000000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 11;
            return 100;
         }
         return -1;
      case 12:
         if ((active0 & 0x600000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 12;
            return 100;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 100;
         return -1;
      case 13:
         if ((active0 & 0x600000000000L) != 0L)
            return 100;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 36:
         return jjStopAtPos(0, 89);
      case 37:
         return jjStopAtPos(0, 44);
      case 40:
         return jjStopAtPos(0, 101);
      case 41:
         return jjStopAtPos(0, 102);
      case 42:
         return jjStopAtPos(0, 53);
      case 43:
         return jjStopAtPos(0, 38);
      case 44:
         return jjStopAtPos(0, 96);
      case 45:
         return jjStopAtPos(0, 34);
      case 46:
         return jjStartNfaWithStates_0(0, 90, 39);
      case 47:
         return jjStopAtPos(0, 52);
      case 58:
         return jjStopAtPos(0, 91);
      case 59:
         return jjStopAtPos(0, 94);
      case 60:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x10000000000L);
      case 61:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 62:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x300L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x3000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x78000000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x1e80000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x1c4000000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 99);
      case 92:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      case 93:
         return jjStopAtPos(0, 100);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x1L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x106L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xd0000L, 0x400L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x900000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xfc000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xa000000000000L, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 6);
      case 124:
         return jjStopAtPos(0, 103);
      case 125:
         return jjStopAtPos(0, 7);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L);
      case 61:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 92:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xe681200000000L, active1, 0xc8L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x64000000c0000000L, active1, 0L);
      case 111:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 75, 100);
         return jjMoveStringLiteralDfa2_0(active0, 0x1818000803000L, active1, 0x106L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 100);
         return jjMoveStringLiteralDfa2_0(active0, 0x200060002000000L, active1, 0x30L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80c0000000000300L, active1, 0x1L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0xd0000L, active1, 0x400L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x900000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(2, 104);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 100);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000010000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x3800000100000L, active1, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200201000L, active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0x300L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x60002000000L, active1, 0x30L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800600018000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40018000800000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x8L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 100);
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x90000000000c0300L, active1, 0x481L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 119:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 100);
         break;
      case 121:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 100);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000080800300L, active1, 0x1L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 100);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 100);
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000c0000L, active1, 0x400L);
      case 104:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 100);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000200000L, active1, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2080000008000000L, active1, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x80010000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000001000L, active1, 0x34L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000000L, active1, 0x40L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x110000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100010000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000002000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8002000000000300L, active1, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 100);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 100);
         return jjMoveStringLiteralDfa5_0(active0, 0x104660200002000L, active1, 0x122L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0x240L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0xa00000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000c0000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0x4L);
      case 112:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 100);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80090000000L, active1, 0x400L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 100);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 100);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0x102L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 100);
         return jjMoveStringLiteralDfa6_0(active0, 0xc0000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 100);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0x90L);
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 100);
         break;
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000300L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L);
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 100);
         break;
      case 109:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 100);
         break;
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 100);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000001000L, active1, 0x624L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x60200000000L, active1, 0L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 100);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000600000000000L, active1, 0x40L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 100);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 100);
         break;
      case 121:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 100);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0x80L);
      case 100:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 100);
         break;
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000600000041000L, active1, 0x5L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x210L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x300L, active1, 0L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 100);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 100);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 100);
         break;
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 100);
         return jjMoveStringLiteralDfa7_0(active0, 0x60000002000L, active1, 0x140L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 100);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 100);
         return jjMoveStringLiteralDfa8_0(active0, 0x300L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0x50L);
      case 108:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 100);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x600080001000L, active1, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L, active1, 0x100L);
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 100);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 100);
         break;
      case 121:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 100);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80L);
      case 99:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 70, 100);
         break;
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 68, 100);
         return jjMoveStringLiteralDfa9_0(active0, 0x300L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 13, 100);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x101L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 12, 100);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 100);
         return jjMoveStringLiteralDfa9_0(active0, 0x600000000000L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x600000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 41, 100);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(9, 66, 100);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 72, 100);
         break;
      case 116:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x200L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(10, 71, 100);
         break;
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 9, 100);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x600000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x600000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x600000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 63, 100);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(12, 64, 100);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 46, 100);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 100;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(39);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 4;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddStates(12, 16);
                  }
                  else if (curChar == 38)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  break;
               case 100:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  break;
               case 29:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  break;
               case 33:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  break;
               case 17:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  break;
               case 21:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  break;
               case 1:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  break;
               case 0:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  break;
               case 3:
               case 4:
                  if (curChar == 38 && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 35:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(36, 37);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if (curChar == 46)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(17, 19);
                  break;
               case 41:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 45:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if (curChar == 39 && kind > 87)
                     kind = 87;
                  break;
               case 48:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 49:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 46);
                  break;
               case 50:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 51:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 53:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 54:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 56:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 57:
                  if (curChar == 34 && kind > 88)
                     kind = 88;
                  break;
               case 58:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 59:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 60:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(59);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 65:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 43);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(67, 68);
                  break;
               case 69:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(70, 43);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if (curChar != 46)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(27, 29);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(27, 29);
                  break;
               case 75:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(76, 43);
                  break;
               case 78:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(78);
                  break;
               case 79:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddTwoStates(79, 80);
                  break;
               case 80:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 82:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddTwoStates(80, 82);
                  break;
               case 83:
                  if (curChar != 48)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddStates(12, 16);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(85, 37);
                  break;
               case 86:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(86, 37);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 89:
                  if (curChar == 46)
                     jjCheckNAdd(90);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 92:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(93);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(93, 43);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 96:
                  if (curChar == 46)
                     jjCheckNAdd(97);
                  break;
               case 98:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(99, 43);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddStates(35, 37);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 100:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddTwoStates(79, 80);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAdd(78);
                  }
                  if (curChar == 100)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  break;
               case 6:
                  if (curChar == 110 && kind > 11)
                     kind = 11;
                  break;
               case 7:
               case 13:
                  if (curChar == 97)
                     jjCheckNAdd(6);
                  break;
               case 8:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 109 && kind > 14)
                     kind = 14;
                  break;
               case 20:
               case 23:
                  if (curChar == 117)
                     jjCheckNAdd(19);
                  break;
               case 22:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 116 && kind > 22)
                     kind = 22;
                  break;
               case 27:
               case 31:
                  if (curChar == 97)
                     jjCheckNAdd(26);
                  break;
               case 28:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 37:
                  if ((0x100000001000L & l) != 0L && kind > 78)
                     kind = 78;
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 43:
                  if ((0x5000000050L & l) != 0L && kind > 82)
                     kind = 82;
                  break;
               case 45:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 47:
                  if (curChar == 92)
                     jjAddStates(40, 42);
                  break;
               case 48:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 54:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 55:
                  if (curChar == 92)
                     jjAddStates(43, 45);
                  break;
               case 56:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 64:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 68:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 74:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 77:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddStates(35, 37);
                  break;
               case 78:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(78);
                  break;
               case 79:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddTwoStates(79, 80);
                  break;
               case 81:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddTwoStates(80, 82);
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddTwoStates(80, 82);
                  break;
               case 84:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(85, 37);
                  break;
               case 87:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 88:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 90:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 91:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 94:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(95);
                  break;
               case 95:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 97:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 45:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 54:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 100 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   63, 64, 43, 67, 68, 71, 72, 54, 55, 57, 45, 47, 84, 86, 37, 87, 
   94, 39, 40, 43, 54, 55, 59, 57, 63, 64, 43, 73, 74, 43, 88, 89, 
   95, 96, 97, 78, 79, 80, 41, 42, 48, 49, 51, 56, 58, 60, 65, 66, 
   69, 70, 75, 76, 90, 91, 92, 93, 98, 99, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\173", "\175", 
"\101\164\164\141\143\150\155\145\156\164", "\101\164\164\141\143\150\155\145\156\164\163", "\41", null, 
"\103\157\155\160\157\156\145\156\164", "\103\157\156\156\145\143\164\157\162", null, "\75\75", 
"\145\170\151\163\164\163", null, "\145\170\164\145\156\144\145\144", "\145\170\164\145\156\144\163", 
"\146\141\154\163\145", "\106\141\155\151\154\171", null, "\146\157\162\141\154\154", "\76\75", 
"\107\162\157\165\160", "\151\146\146", "\151\155\160\154\151\145\163", "\151\155\160\157\162\164", 
"\151\156", "\151\156\164", "\151\156\166\141\162\151\141\156\164", "\74\75", 
"\155\145\155\142\145\162\163", "\55", "\41\75", "\156\145\167", "\157\162", "\53", "\120\157\162\164", 
"\120\157\162\164\163", "\120\162\157\160\145\162\164\151\145\163", 
"\120\162\157\160\145\162\164\171", "\122\145\143\157\162\144", "\45", 
"\122\145\160\162\145\163\145\156\164\141\164\151\157\156", "\122\145\160\162\145\163\145\156\164\141\164\151\157\156\163", 
"\122\157\154\145", "\122\157\154\145\163", "\163\145\154\145\143\164", 
"\123\145\161\165\145\156\143\145", "\163\145\164", "\57", "\52", "\123\164\162\151\156\147", 
"\123\164\171\154\145", "\123\171\163\164\145\155", "\164\162\165\145", "\165\156\151\161\165\145", 
"\124\171\160\145", "\167\151\164\150", "\141\156\141\154\171\163\151\163", "\141\156\171", 
"\141\164\164\141\143\150\145\144\160\157\162\164\163", "\141\164\164\141\143\150\145\144\162\157\154\145\163", 
"\143\157\154\154\145\143\164", "\143\157\155\160\157\156\145\156\164\163", "\144\145\163\151\147\156", 
"\160\162\157\160\142\145\147\151\156", "\160\162\157\160\145\156\144", "\150\145\165\162\151\163\164\151\143", 
"\163\145\164\137\144\145\143\154\141\162\145", "\143\157\156\156\145\143\164\157\162\163", 
"\142\151\156\144\151\156\147\163", "\145\170\164\145\162\156\141\154", "\164\157", null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\44", "\56", "\72", "\134", 
"\134\134", "\73", "\75", "\54", "\74", "\76", "\133", "\135", "\50", "\51", "\174", 
"\74\55\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffdffe1L, 0x1ffff847fffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[100];
private final int[] jjstateSet = new int[200];
protected char curChar;
/** Constructor. */
public acmeParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public acmeParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 100; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
