/* Generated By:JJTree&JavaCC: Do not edit this line. acmeParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface acmeParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int AND = 5;
  /** RegularExpression Id. */
  int BRACKET_OPEN = 6;
  /** RegularExpression Id. */
  int BRACKET_CLOSE = 7;
  /** RegularExpression Id. */
  int ATTACHMENT = 8;
  /** RegularExpression Id. */
  int ATTACHMENTS = 9;
  /** RegularExpression Id. */
  int BANG = 10;
  /** RegularExpression Id. */
  int BOOLEAN = 11;
  /** RegularExpression Id. */
  int COMPONENT = 12;
  /** RegularExpression Id. */
  int CONNECTOR = 13;
  /** RegularExpression Id. */
  int ENUM = 14;
  /** RegularExpression Id. */
  int EQ = 15;
  /** RegularExpression Id. */
  int EXISTS = 16;
  /** RegularExpression Id. */
  int EXPONENT = 17;
  /** RegularExpression Id. */
  int EXTENDED = 18;
  /** RegularExpression Id. */
  int EXTENDS = 19;
  /** RegularExpression Id. */
  int FALSE = 20;
  /** RegularExpression Id. */
  int FAMILY = 21;
  /** RegularExpression Id. */
  int FLOAT = 22;
  /** RegularExpression Id. */
  int FORALL = 23;
  /** RegularExpression Id. */
  int GE = 24;
  /** RegularExpression Id. */
  int GROUP = 25;
  /** RegularExpression Id. */
  int IFF = 26;
  /** RegularExpression Id. */
  int IMPLIES = 27;
  /** RegularExpression Id. */
  int IMPORT = 28;
  /** RegularExpression Id. */
  int IN = 29;
  /** RegularExpression Id. */
  int INT = 30;
  /** RegularExpression Id. */
  int INVARIANT = 31;
  /** RegularExpression Id. */
  int LE = 32;
  /** RegularExpression Id. */
  int MEMBERS = 33;
  /** RegularExpression Id. */
  int MINUS = 34;
  /** RegularExpression Id. */
  int NE = 35;
  /** RegularExpression Id. */
  int NEW = 36;
  /** RegularExpression Id. */
  int OR = 37;
  /** RegularExpression Id. */
  int PLUS = 38;
  /** RegularExpression Id. */
  int PORT = 39;
  /** RegularExpression Id. */
  int PORTS = 40;
  /** RegularExpression Id. */
  int PROPERTIES = 41;
  /** RegularExpression Id. */
  int PROPERTY = 42;
  /** RegularExpression Id. */
  int RECORD = 43;
  /** RegularExpression Id. */
  int REM = 44;
  /** RegularExpression Id. */
  int REPRESENTATION = 45;
  /** RegularExpression Id. */
  int REPRESENTATIONS = 46;
  /** RegularExpression Id. */
  int ROLE = 47;
  /** RegularExpression Id. */
  int ROLES = 48;
  /** RegularExpression Id. */
  int SELECT = 49;
  /** RegularExpression Id. */
  int SEQUENCE = 50;
  /** RegularExpression Id. */
  int SET = 51;
  /** RegularExpression Id. */
  int SLASH = 52;
  /** RegularExpression Id. */
  int STAR = 53;
  /** RegularExpression Id. */
  int STRING = 54;
  /** RegularExpression Id. */
  int STYLE = 55;
  /** RegularExpression Id. */
  int SYSTEM = 56;
  /** RegularExpression Id. */
  int TRUE = 57;
  /** RegularExpression Id. */
  int UNIQUE = 58;
  /** RegularExpression Id. */
  int TYPE = 59;
  /** RegularExpression Id. */
  int WITH = 60;
  /** RegularExpression Id. */
  int ANALYSIS = 61;
  /** RegularExpression Id. */
  int ANY = 62;
  /** RegularExpression Id. */
  int ATTACHEDPORTS = 63;
  /** RegularExpression Id. */
  int ATTACHEDROLES = 64;
  /** RegularExpression Id. */
  int COLLECT = 65;
  /** RegularExpression Id. */
  int COMPONENTS = 66;
  /** RegularExpression Id. */
  int DESIGN = 67;
  /** RegularExpression Id. */
  int PROPBEGIN = 68;
  /** RegularExpression Id. */
  int PROPEND = 69;
  /** RegularExpression Id. */
  int HEURISTIC = 70;
  /** RegularExpression Id. */
  int SET_DECLARE = 71;
  /** RegularExpression Id. */
  int CONNECTORS = 72;
  /** RegularExpression Id. */
  int BINDINGS = 73;
  /** RegularExpression Id. */
  int EXTERNAL = 74;
  /** RegularExpression Id. */
  int TO = 75;
  /** RegularExpression Id. */
  int IDENTIFIER = 76;
  /** RegularExpression Id. */
  int ELEMENT = 77;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 78;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 79;
  /** RegularExpression Id. */
  int HEX_LITERAL = 80;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 81;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 82;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 83;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 84;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 85;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 86;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 87;
  /** RegularExpression Id. */
  int STRING_LITERAL = 88;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<AND>",
    "\"{\"",
    "\"}\"",
    "\"Attachment\"",
    "\"Attachments\"",
    "\"!\"",
    "<BOOLEAN>",
    "\"Component\"",
    "\"Connector\"",
    "<ENUM>",
    "\"==\"",
    "\"exists\"",
    "<EXPONENT>",
    "\"extended\"",
    "\"extends\"",
    "\"false\"",
    "\"Family\"",
    "<FLOAT>",
    "\"forall\"",
    "\">=\"",
    "\"Group\"",
    "\"iff\"",
    "\"implies\"",
    "\"import\"",
    "\"in\"",
    "\"int\"",
    "\"invariant\"",
    "\"<=\"",
    "\"members\"",
    "\"-\"",
    "\"!=\"",
    "\"new\"",
    "\"or\"",
    "\"+\"",
    "\"Port\"",
    "\"Ports\"",
    "\"Properties\"",
    "\"Property\"",
    "\"Record\"",
    "\"%\"",
    "\"Representation\"",
    "\"Representations\"",
    "\"Role\"",
    "\"Roles\"",
    "\"select\"",
    "\"Sequence\"",
    "\"set\"",
    "\"/\"",
    "\"*\"",
    "\"String\"",
    "\"Style\"",
    "\"System\"",
    "\"true\"",
    "\"unique\"",
    "\"Type\"",
    "\"with\"",
    "\"analysis\"",
    "\"any\"",
    "\"attachedports\"",
    "\"attachedroles\"",
    "\"collect\"",
    "\"components\"",
    "\"design\"",
    "\"propbegin\"",
    "\"propend\"",
    "\"heuristic\"",
    "\"set_declare\"",
    "\"connectors\"",
    "\"bindings\"",
    "\"external\"",
    "\"to\"",
    "<IDENTIFIER>",
    "<ELEMENT>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"$\"",
    "\".\"",
    "\":\"",
    "\"\\\\\"",
    "\"\\\\\\\\\"",
    "\";\"",
    "\"=\"",
    "\",\"",
    "\"<\"",
    "\">\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"|\"",
    "\"<->\"",
  };

}
