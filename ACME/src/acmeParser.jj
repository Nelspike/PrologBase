/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. acmeParser.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 * Authors: Nelson Oliveira, Jo\u00e3o Santos, Margarida Pereira, Ana Ferreira
 * Grupo 2A - Tema 11 -> ACME
 */

options
{
  JDK_VERSION = "1.5";
  static = false;
               
}

PARSER_BEGIN(acmeParser)

import java.io.*;
import java.util.*;

public class acmeParser/*@bgen(jjtree)*/implements acmeParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTacmeParserState jjtree = new JJTacmeParserState();

/*@egen*/
	public static SymbolTable table;
	public static ArrayList<Component> components;
	public static ArrayList<Connector> connectors;
	public static ArrayList<Attachment> attachments;
	public static boolean isSystem;
	private static char keyPressed;
	private static Stack<SymbolTable> tableStack;
	private static ArrayList<String> semanticsErrors;

	private static void runComponent(String filename)
	{	    table = new SymbolTable(500);
	    semanticsErrors = new ArrayList<String>();
	    tableStack = new Stack<SymbolTable>();
	    
	    components = new ArrayList<Component>();
	    connectors = new ArrayList<Connector>();
	    attachments = new ArrayList<Attachment>();
	    
	    acmeParser parser = null;
	    try
	    {
	      parser = new acmeParser(new FileInputStream(filename));
	    }
	    catch(Exception e)
	    {
			e.printStackTrace();
	    }
	
		SimpleNode root = null;
		
		try
		{		  root = parser.parse_AcmeDesign();
		}
		catch(ParseException pE)
		{			System.out.println(pE.getMessage());

			System.out.println("A sintatic error has been found. Please correct your file!\n");
			return;
		}

		if(semanticsErrors.size() > 0)
		{
			for(int i = 0; i < semanticsErrors.size(); i++)
				System.out.println(semanticsErrors.get(i));

			return;
		}
		else
		{
			root.dump("");
			System.out.println();
			new TreeVerifier(root);
			System.out.println("Success!\n");

			int indexOfDot = filename.indexOf('.');
			String realName = filename.substring(0, indexOfDot);
		
			if(isSystem)
			{
				new DotGenerator(components, connectors, attachments, realName+".dot");
				
	            String[] cmdarray = {"dot/dot.exe",  "-Tpng",  realName+".dot", "-o", realName+".png"};
	            
	            try {
	                    Runtime.getRuntime().exec(cmdarray);
	            } catch (IOException e) {
	                    System.out.println("Cannot execute DOT generation command!");
	                    e.printStackTrace();
	            }
			}
		}
	}

	private static void waitForEnter()
    {
            System.out.println("\nPress ONLY Enter to Continue...");
            pressKey();
            while(keyPressed != 13)
            {
                    System.out.println("\nPress ONLY Enter to Continue...");
                    pressKey();     
            }
    }

    private static void pressKey()
    {
            try {
                    keyPressed = (char) new InputStreamReader(System.in).read ();
            } catch (IOException e) {
                    System.out.println("Cannot read from Keyboard");
            }
    }

	private static void clearScreen()
	{		System.out.println('\n');
		System.out.println('\n');
		System.out.println('\n');
		System.out.println('\n');
		System.out.println('\n');
		System.out.println('\n');
		System.out.println('\n');
		System.out.println('\n');
		System.out.println('\n');
	}
  
  public static void main(String args []) throws ParseException
  {
	while(true)
	{ 
		System.out.println("ACME - Dotty Compiler Generator\n");
		System.out.println("1 - Run First Test (Graph Rep) - Testsuite");
		System.out.println("2 - Run Second Test (Graph Rep) - Example");
		System.out.println("3 - Run Third Test (Syntatic Error) - Example");
		System.out.println("4 - Run Fourth Test - Example");
		System.out.println("5 - Run Fifth Test (Graph Rep)");
		System.out.println("6 - Run Sixth Test - Testsuite");
		System.out.println("7 - Run Seventh Test (Syntatic Error) - Testsuite");
		System.out.println("8 - Run Eighth Test (Semantic Error) - Testsuite");
		System.out.println("9 - Exit Client\n");

		System.out.print("Choose one: ");
		Scanner input = new Scanner(System.in);
		int choice = Integer.parseInt(input.nextLine());

		switch(choice)
		{			case 1:
				runComponent("testsuite/file1.acme");
				break;
			case 2:
				runComponent("examples/file2.acme");
				break;
			case 3:
				runComponent("examples/file3.acme");
				break;
			case 4:
				runComponent("examples/file4.acme");
				break;
			case 5:
				runComponent("examples/file5.acme");
				break;
			case 6:
				runComponent("testsuite/file6.acme");
				break;
			case 7:
				runComponent("testsuite/file7.acme");
				break;
			case 8:
				runComponent("testsuite/file8.acme");
				break;
			case 9:
				System.exit(0);
				break;
		}

		waitForEnter();
		clearScreen();
	}
  }
}

PARSER_END(acmeParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  <AND: ("and") | "&" | "&&" >
|<BRACKET_OPEN: "{" >
|<BRACKET_CLOSE: "}" >
|<ATTACHMENT: "Attachment" >
|<ATTACHMENTS: "Attachments" >
|<BANG: "!" >
|<BOOLEAN: "Boolean" | "boolean">
|<COMPONENT: "Component" >
|<CONNECTOR: "Connector" >
|<ENUM: "enum" | "Enum">
|<EQ:  "==">
|<EXISTS: "exists">
|<#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|<EXTENDED: "extended">
|<EXTENDS: "extends" >
|<FALSE: "false">
|<FAMILY: "Family">
|<FLOAT: "Float" | "float" >
|<FORALL: "forall">
|<GE: ">=" >
|<GROUP: "Group" >
|<IFF: "iff">
|<IMPLIES: ("implies")>
|<IMPORT: ("import") >
|<IN: "in" >
|<INT: "int" >
|<INVARIANT: ("invariant") >
|<LE: "<=" >
|<MEMBERS: ("members") >
|<MINUS: ("-") >
|<NE: "!=">
|<NEW: ("new") >
|<OR: ("or") >
|<PLUS: ("+") >
|<PORT: "Port" >
|<PORTS: "Ports" >
|<PROPERTIES: "Properties" >
|<PROPERTY: "Property" >
|<RECORD: "Record">
|<REM: "%">
|<REPRESENTATION: "Representation">
|<REPRESENTATIONS: "Representations">
|<ROLE: "Role">
|<ROLES: "Roles">
|<SELECT: "select" >
|<SEQUENCE: "Sequence" >
|<SET: "set">
|<SLASH: "/">
|<STAR: "*">
|<STRING: "String" >
|<STYLE: "Style">
|<SYSTEM: "System">
|<TRUE: "true">
|<UNIQUE: "unique">
|<TYPE: ("Type")>
|<WITH: "with">
|<ANALYSIS: "analysis">
|<ANY: "any">
|<ATTACHEDPORTS:  "attachedports">
|<ATTACHEDROLES: "attachedroles" >
|<COLLECT: "collect" >
|<COMPONENTS: "components">
|<DESIGN: "design" >
|<PROPBEGIN: "propbegin">
|<PROPEND: "propend">
|<HEURISTIC: "heuristic">
|<SET_DECLARE: "set_declare">
|<CONNECTORS: "connectors" >
|<BINDINGS: "bindings" >
|<EXTERNAL: "external" >
|<TO: "to" >
|<IDENTIFIER: (["a"-"z", "A"-"Z"]) (["a"-"z", "A"-"Z", "0"-"9", "_", "-"])*>
|<ELEMENT: (<IDENTIFIER> ("."<IDENTIFIER>)*) >
| <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
| <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
| <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
| <#OCTAL_LITERAL: "0" (["0"-"7"])*>
| <FLOATING_POINT_LITERAL: <DECIMAL_FLOATING_POINT_LITERAL> | <HEXADECIMAL_FLOATING_POINT_LITERAL>>
| <#DECIMAL_FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]>
| <#DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
| <#HEXADECIMAL_FLOATING_POINT_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])? | "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?>
| <#HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+>
| <CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
| <STRING_LITERAL: "\"" (~["\"","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">
}

void Filename():{/*@bgen(jjtree) Filename */
                 ASTFilename jjtn000 = new ASTFilename(JJTFILENAME);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) Filename */
    try {
/*@egen*/
    ( "$" | "%" )? t = <IDENTIFIER> {jjtn000.addToken(t.image);}
    ( ( ( "." | ":" | "-" | "+" | "\\" | "\\\\" | "/" | "$" | "%" ) )+ s = <IDENTIFIER> {jjtn000.addToken(s.image);})*/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

SimpleNode parse_AcmeDesign():{/*@bgen(jjtree) parse_AcmeDesign */
                               ASTparse_AcmeDesign jjtn000 = new ASTparse_AcmeDesign(JJTPARSE_ACMEDESIGN);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, u;}
{/*@bgen(jjtree) parse_AcmeDesign */
        try {
/*@egen*/
        ( u = <IMPORT> {jjtn000.addToken(u.image);}
        ( Filename() ";" |
        	t = <STRING_LITERAL> {jjtn000.addToken(t.image); String s = table.addSymbol(t.image, u.image); if(!s.equals("")) semanticsErrors.add(s);}
         ";" ) )*
    ( LOOKAHEAD(2) TypeDeclaration() |
                                    FamilyDeclaration() |
                                    DesignAnalysisDeclaration() |
                                    PropertyDeclaration(-1, "") |
                                    PropertiesBlock(-1, "") |
                                    SystemDeclaration() )* <EOF>/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
    
void FamilyDeclaration():{/*@bgen(jjtree) FamilyDeclaration */
                          ASTFamilyDeclaration jjtn000 = new ASTFamilyDeclaration(JJTFAMILYDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, v;}
{/*@bgen(jjtree) FamilyDeclaration */
    try {
/*@egen*/
    ( t = <FAMILY> {jjtn000.addToken(t.image);} | t = <STYLE> {jjtn000.addToken(t.image);} )
    s = <IDENTIFIER> {jjtn000.addToken(s.image);}
    ( ";"
            | ( "=" FamilyBody() ( ";" )? )
            | ( u = <EXTENDS> {jjtn000.addToken(u.image);} lookup_TypeByName()
                    ( "," lookup_TypeByName())* v = <WITH> {jjtn000.addToken(v.image);} FamilyBody() ( ";" )? ) )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void FamilyBody():{/*@bgen(jjtree) FamilyBody */
                   ASTFamilyBody jjtn000 = new ASTFamilyBody(JJTFAMILYBODY);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) FamilyBody */
           try {
/*@egen*/
           LOOKAHEAD(2) t = "{" {jjtn000.addToken(t.image);}  s = "}"/*@bgen(jjtree)*/
                                                                      {
                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                        jjtc000 = false;
                                                                      }
/*@egen*/ {jjtn000.addToken(s.image);}
              | t = "{"              {jjtn000.addToken(t.image);}
              (LOOKAHEAD(2) TypeDeclaration()
              				| SystemStructure() )+ s = "}"/*@bgen(jjtree)*/
                                                                       {
                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                         jjtc000 = false;
                                                                       }
/*@egen*/ {jjtn000.addToken(s.image);}/*@bgen(jjtree)*/
           } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               throw (RuntimeException)jjte000;
             }
             if (jjte000 instanceof ParseException) {
               throw (ParseException)jjte000;
             }
             throw (Error)jjte000;
           } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
             }
           }
/*@egen*/
}

void TypeDeclaration():{/*@bgen(jjtree) TypeDeclaration */
  ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeDeclaration */
    try {
/*@egen*/
    ElementTypeDeclaration() | PropertyTypeDeclaration()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
    
void ElementTypeDeclaration():{/*@bgen(jjtree) ElementTypeDeclaration */
                               ASTElementTypeDeclaration jjtn000 = new ASTElementTypeDeclaration(JJTELEMENTTYPEDECLARATION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) ElementTypeDeclaration */
        try {
/*@egen*/
        (t = <EXTENDS> {jjtn000.addToken(t.image);} lookup_TypeByName()
        	( "," lookup_TypeByName())* s = <WITH> {jjtn000.addToken(s.image);}
                (LOOKAHEAD(3) parse_ElementProtoTypeDescription()
                | parse_descriptions(-1)) ( ";" )? )
        | ElementProtoTypeDeclaration()        
    | ComponentTypeDeclaration(-1)        
    | GroupTypeDeclaration()        
    | ConnectorTypeDeclaration()        
    | PortTypeDeclaration()        
    | RoleTypeDeclaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void parse_descriptions(int index):{/*@bgen(jjtree) parse_descriptions */
                                    ASTparse_descriptions jjtn000 = new ASTparse_descriptions(JJTPARSE_DESCRIPTIONS);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, v, u;}
{/*@bgen(jjtree) parse_descriptions */
   try {
/*@egen*/
   (t = <NEW> {jjtn000.addToken(t.image);} lookup_TypeByName() ("," lookup_TypeByName() )*
  | t = <BRACKET_OPEN> {jjtn000.addToken(t.image);}
  		( parse_GroupDescription()
          | LOOKAHEAD(3) parse_PropertiesChoice() )* s = <BRACKET_CLOSE> {jjtn000.addToken(s.image);})
        ( v = <EXTENDED> {jjtn000.addToken(v.image);} u = <WITH> {jjtn000.addToken(u.image);}parse_descriptions(index))?/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/                  
}

void parse_descriptionsConn(int index):{/*@bgen(jjtree) parse_descriptionsConn */
                                        ASTparse_descriptionsConn jjtn000 = new ASTparse_descriptionsConn(JJTPARSE_DESCRIPTIONSCONN);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, v, u;}
{/*@bgen(jjtree) parse_descriptionsConn */
   try {
/*@egen*/
   (t = <NEW> {jjtn000.addToken(t.image);} lookup_TypeByName() ("," lookup_TypeByName() )*
  | t = <BRACKET_OPEN> {jjtn000.addToken(t.image);}
  		(LOOKAHEAD(3) parse_InnerRoleDescription(index))* s = <BRACKET_CLOSE> {jjtn000.addToken(s.image);})
        ( v = <EXTENDED> {jjtn000.addToken(v.image);} u = <WITH> {jjtn000.addToken(u.image);}parse_descriptionsConn(index))?/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/                  
}

void parse_descriptionsComp(int index):{/*@bgen(jjtree) parse_descriptionsComp */
                                        ASTparse_descriptionsComp jjtn000 = new ASTparse_descriptionsComp(JJTPARSE_DESCRIPTIONSCOMP);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, v, u;}
{/*@bgen(jjtree) parse_descriptionsComp */
   try {
/*@egen*/
   (t = <NEW> {jjtn000.addToken(t.image);} lookup_TypeByName() ("," lookup_TypeByName() )*
  | t = <BRACKET_OPEN> {jjtn000.addToken(t.image);}
  		(LOOKAHEAD(3) parse_InnerPortDescription(index))* s = <BRACKET_CLOSE> {jjtn000.addToken(s.image);})
        ( v = <EXTENDED> {jjtn000.addToken(v.image);} u = <WITH> {jjtn000.addToken(u.image);}parse_descriptionsComp(index))?/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/                  
}
   
void ElementProtoTypeDeclaration():{/*@bgen(jjtree) ElementProtoTypeDeclaration */
                                    ASTElementProtoTypeDeclaration jjtn000 = new ASTElementProtoTypeDeclaration(JJTELEMENTPROTOTYPEDECLARATION);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u;}
{/*@bgen(jjtree) ElementProtoTypeDeclaration */
    try {
/*@egen*/
    t = <ELEMENT> {jjtn000.addToken(t.image);}
    s = <TYPE> {jjtn000.addToken(s.image);}
    u = <IDENTIFIER> {jjtn000.addToken(u.image);}
    ( "=" parse_ElementProtoTypeDescription() ( ";" )? | ";" )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
    
void ComponentTypeDeclaration(int index):{/*@bgen(jjtree) ComponentTypeDeclaration */
                                          ASTComponentTypeDeclaration jjtn000 = new ASTComponentTypeDeclaration(JJTCOMPONENTTYPEDECLARATION);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u;}
{/*@bgen(jjtree) ComponentTypeDeclaration */
    try {
/*@egen*/
    t = <COMPONENT> {jjtn000.addToken(t.image);} s = <TYPE> {jjtn000.addToken(s.image);} u = <IDENTIFIER> {jjtn000.addToken(u.image);}
    ( "=" (("{" (parse_ComponentDescription(index))* "}") | parse_ComponentDescription(index)) ( ";" )? | ";" )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}        
    
void GroupTypeDeclaration():{/*@bgen(jjtree) GroupTypeDeclaration */
                             ASTGroupTypeDeclaration jjtn000 = new ASTGroupTypeDeclaration(JJTGROUPTYPEDECLARATION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u;}
{/*@bgen(jjtree) GroupTypeDeclaration */
    try {
/*@egen*/
    t = <GROUP> {jjtn000.addToken(t.image);} s = <TYPE> {jjtn000.addToken(s.image);} u = <IDENTIFIER> {jjtn000.addToken(u.image);}
    ( "=" (("{" (parse_GroupDescription())* "}") | parse_GroupDescription()) ( ";" )? | ";" )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}            
    
void ConnectorTypeDeclaration():{/*@bgen(jjtree) ConnectorTypeDeclaration */
                                 ASTConnectorTypeDeclaration jjtn000 = new ASTConnectorTypeDeclaration(JJTCONNECTORTYPEDECLARATION);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u;}
{/*@bgen(jjtree) ConnectorTypeDeclaration */
    try {
/*@egen*/
    t = <CONNECTOR> {jjtn000.addToken(t.image);} s = <TYPE> {jjtn000.addToken(s.image);} u = <IDENTIFIER> {jjtn000.addToken(u.image);}
    ( "=" (("{" (parse_ConnectorDescription(-1))* "}") | parse_ConnectorDescription(-1)) ( ";" )? | ";" )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PortTypeDeclaration():{/*@bgen(jjtree) PortTypeDeclaration */
                            ASTPortTypeDeclaration jjtn000 = new ASTPortTypeDeclaration(JJTPORTTYPEDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, y, x, z;}
{/*@bgen(jjtree) PortTypeDeclaration */
    try {
/*@egen*/
    t = <PORT> {jjtn000.addToken(t.image);} s = <TYPE> {jjtn000.addToken(s.image);} u = <IDENTIFIER> {jjtn000.addToken(u.image);}
    ( "=" (parse_descriptions(-1))* ( ";" )?
            | y = <EXTENDS> {jjtn000.addToken(y.image);} x = <IDENTIFIER> {jjtn000.addToken(x.image);} z = <WITH> {jjtn000.addToken(z.image);} (parse_descriptions(-1))* ( ";" )
            | ";" )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}      
     
void RoleTypeDeclaration():{/*@bgen(jjtree) RoleTypeDeclaration */
                            ASTRoleTypeDeclaration jjtn000 = new ASTRoleTypeDeclaration(JJTROLETYPEDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u;}
{/*@bgen(jjtree) RoleTypeDeclaration */
    try {
/*@egen*/
    t = <ROLE> {jjtn000.addToken(t.image);} s = <TYPE> {jjtn000.addToken(s.image);} u = <IDENTIFIER> {jjtn000.addToken(u.image);} ( "=" parse_descriptions(-1) ( ";" )? | ";" )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
      
void lookup_TypeByName():{/*@bgen(jjtree) lookup_TypeByName */
                          ASTlookup_TypeByName jjtn000 = new ASTlookup_TypeByName(JJTLOOKUP_TYPEBYNAME);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) lookup_TypeByName */
    try {
/*@egen*/
    LOOKAHEAD(2) ( t = <IDENTIFIER> {jjtn000.addToken(t.image);} "." ) | t = <IDENTIFIER>/*@bgen(jjtree)*/
                                                                                          {
                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                            jjtc000 = false;
                                                                                          }
/*@egen*/ {jjtn000.addToken(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}
 
void lookup_arbitraryTypeByName():{/*@bgen(jjtree) lookup_arbitraryTypeByName */
                                   ASTlookup_arbitraryTypeByName jjtn000 = new ASTlookup_arbitraryTypeByName(JJTLOOKUP_ARBITRARYTYPEBYNAME);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) lookup_arbitraryTypeByName */
    try {
/*@egen*/
    ( PropertyTypeDescription()
    | t = <SYSTEM>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.addToken(t.image);}
    | t = <COMPONENT>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.addToken(t.image);}
    | t = <GROUP>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.addToken(t.image);}
    | t = <CONNECTOR>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.addToken(t.image);}
    | t = <PORT>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.addToken(t.image);}
    | t = <ROLE>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.addToken(t.image);}
    | t = <PROPERTY>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.addToken(t.image);}
    | t = <REPRESENTATION>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {jjtn000.addToken(t.image);} )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/    
}
          
void SystemDeclaration():{/*@bgen(jjtree) SystemDeclaration */
                          ASTSystemDeclaration jjtn000 = new ASTSystemDeclaration(JJTSYSTEMDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) SystemDeclaration */
    try {
/*@egen*/
    t = <SYSTEM> {jjtn000.addToken(t.image); isSystem = true;}
    s = <IDENTIFIER> {jjtn000.addToken(s.image); table.addSymbol(s.image, t.image);}
    ( ":" lookup_TypeByName() ( "," lookup_TypeByName())* )?
    ( "=" SystemBody() ( ";" )? | ";" )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}      
      
void SystemBody():{/*@bgen(jjtree) SystemBody */
                   ASTSystemBody jjtn000 = new ASTSystemBody(JJTSYSTEMBODY);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) SystemBody */
    try {
/*@egen*/
    ( t = <NEW> {jjtn000.addToken(t.image);}
    	lookup_TypeByName() ( "," lookup_TypeByName())*
    | "{" ( SystemStructure() )* "}" )
    	 ( t = <EXTENDED>  {jjtn000.addToken(t.image);}
    	 	 s = <WITH>  {jjtn000.addToken(s.image);} SystemBody() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}    
      
void SystemStructure():{/*@bgen(jjtree) SystemStructure */
  ASTSystemStructure jjtn000 = new ASTSystemStructure(JJTSYSTEMSTRUCTURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SystemStructure */
    try {
/*@egen*/
    ComponentDeclaration()   
    | ComponentsBlock()        
    | GroupDeclaration()        
    | ConnectorDeclaration()        
    | ConnectorsBlock()        
    | PortDeclaration(-1)        
    | PortsBlock(-1)        
    | RoleDeclaration(-1)        
    | RolesBlock(-1)        
    | PropertyDeclaration(-1, "")
    | PropertiesBlock(-1, "")        
    | AttachmentsDeclaration()        
    | RepresentationDeclaration()        
    | DesignAnalysisDeclaration()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}       
    
void  parse_ElementProtoTypeDescription():{/*@bgen(jjtree) parse_ElementProtoTypeDescription */
  ASTparse_ElementProtoTypeDescription jjtn000 = new ASTparse_ElementProtoTypeDescription(JJTPARSE_ELEMENTPROTOTYPEDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parse_ElementProtoTypeDescription */
    try {
/*@egen*/
    "{" ( PropertyDeclaration(-1, "") | PropertiesBlock(-1, "") | RepresentationDeclaration() )* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
    
void GroupDeclaration():{/*@bgen(jjtree) GroupDeclaration */
                         ASTGroupDeclaration jjtn000 = new ASTGroupDeclaration(JJTGROUPDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, x, y, z, a;}
{/*@bgen(jjtree) GroupDeclaration */
    try {
/*@egen*/
    t = <GROUP> {jjtn000.addToken(t.image);} s = <IDENTIFIER> {jjtn000.addToken(s.image);}
    ( ":" lookup_TypeByName() ( "," lookup_TypeByName())* )?
    ( "="
        ( x = <NEW> {jjtn000.addToken(x.image);} y = <IDENTIFIER> {jjtn000.addToken(y.image);} z = <EXTENDED> {jjtn000.addToken(z.image);} a = <WITH> {jjtn000.addToken(a.image);} )?
    parse_GroupDescription() ";" | ";" )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}    
    
void parse_GroupDescription():{/*@bgen(jjtree) parse_GroupDescription */
  ASTparse_GroupDescription jjtn000 = new ASTparse_GroupDescription(JJTPARSE_GROUPDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parse_GroupDescription */
    try {
/*@egen*/
    MembersBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}      
    
void ComponentDeclaration():{/*@bgen(jjtree) ComponentDeclaration */
                             ASTComponentDeclaration jjtn000 = new ASTComponentDeclaration(JJTCOMPONENTDECLARATION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, v, x, y, z, a; int index = 0;}
{/*@bgen(jjtree) ComponentDeclaration */
    try {
/*@egen*/

    t = <COMPONENT> {jjtn000.addToken(t.image);}
    s = <IDENTIFIER> {jjtn000.addToken(s.image); String st = table.addSymbol(s.image, t.image); if(!st.equals("")) {semanticsErrors.add(st);}
    	SymbolTable copy = new SymbolTable(table.getStrings()); tableStack.push(copy);}
    {
        Component comp = new Component(s.image);
	    components.add(comp);
	    index = components.size()-1;
	 }
    ( ":" lookup_TypeByName() ( "," lookup_TypeByName() )* )?
    ( "="
        ( x = <NEW> {jjtn000.addToken(x.image);}
          y = <IDENTIFIER> {jjtn000.addToken(y.image);}
          z = <EXTENDED> {jjtn000.addToken(z.image);}
          a = <WITH> {jjtn000.addToken(a.image);} )?
    u = <BRACKET_OPEN> {jjtn000.addToken(u.image);}
    (parse_ComponentDescription(index))*
    v = <BRACKET_CLOSE> {jjtn000.addToken(v.image); table = new SymbolTable(tableStack.pop().getStrings());} ";" | ";" )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}        
    
void ComponentsBlock():{/*@bgen(jjtree) ComponentsBlock */
                        ASTComponentsBlock jjtn000 = new ASTComponentsBlock(JJTCOMPONENTSBLOCK);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, v, x, y; int index = 0;}
{/*@bgen(jjtree) ComponentsBlock */
    try {
/*@egen*/
    t = <COMPONENTS> {jjtn000.addToken(t.image);} x = "{" {jjtn000.addToken(x.image);}
    ( s = <IDENTIFIER>
    {jjtn000.addToken(s.image); Component c = new Component(s.image); components.add(c); index = components.size()-1;}
    ( ":" lookup_TypeByName() ( "," lookup_TypeByName())* )?
    ( "=" u = <BRACKET_OPEN> {jjtn000.addToken(u.image);}(parse_ComponentDescription(index))* v =<BRACKET_CLOSE> {jjtn000.addToken(v.image);}";" | ";" ) )* y = "}" {jjtn000.addToken(y.image);} ( ";" )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
    
void parse_ComponentDescription(int index):{/*@bgen(jjtree) parse_ComponentDescription */
  ASTparse_ComponentDescription jjtn000 = new ASTparse_ComponentDescription(JJTPARSE_COMPONENTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parse_ComponentDescription */
        try {
/*@egen*/
        (PortDeclaration(index)
	        | PortsBlock(index)
	        | PropertiesBlock(index, "Comp")
	        | PropertyDeclaration(index, "Comp"))/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void parse_InnerPortDescription(int index):{/*@bgen(jjtree) parse_InnerPortDescription */
  ASTparse_InnerPortDescription jjtn000 = new ASTparse_InnerPortDescription(JJTPARSE_INNERPORTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parse_InnerPortDescription */
        try {
/*@egen*/
        (PropertiesBlock(index, "Port")
	        | PropertyDeclaration(index, "Port"))/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
    
void ConnectorDeclaration():{/*@bgen(jjtree) ConnectorDeclaration */
                             ASTConnectorDeclaration jjtn000 = new ASTConnectorDeclaration(JJTCONNECTORDECLARATION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, v, x, y, z, a; int index = 0;}
{/*@bgen(jjtree) ConnectorDeclaration */
    try {
/*@egen*/
    t = <CONNECTOR> {jjtn000.addToken(t.image);}
    s = <IDENTIFIER> {jjtn000.addToken(s.image); String st = table.addSymbol(s.image, t.image); if(!st.equals("")) semanticsErrors.add(st);
    				SymbolTable copy = new SymbolTable(table.getStrings()); tableStack.push(copy); }
    {Connector conn = new Connector(s.image); connectors.add(conn); index = connectors.size()-1;}
    ( ":"lookup_TypeByName() ( "," lookup_TypeByName())* )?
    ( "="
        ( x = <NEW> {jjtn000.addToken(x.image);}
          y = <IDENTIFIER> {jjtn000.addToken(y.image);}
          z = <EXTENDED> {jjtn000.addToken(z.image);}
          a = <WITH> {jjtn000.addToken(a.image);} )?
    u = <BRACKET_OPEN> {jjtn000.addToken(u.image);} (parse_ConnectorDescription(index))* v = <BRACKET_CLOSE> {jjtn000.addToken(v.image); table = new SymbolTable(tableStack.pop().getStrings());} ";" | ";" )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}         
    
void ConnectorsBlock():{/*@bgen(jjtree) ConnectorsBlock */
                        ASTConnectorsBlock jjtn000 = new ASTConnectorsBlock(JJTCONNECTORSBLOCK);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, v; int index = 0;}
{/*@bgen(jjtree) ConnectorsBlock */
    try {
/*@egen*/
    t = <CONNECTORS> {jjtn000.addToken(t.image);}
    "{"
    ( s = <IDENTIFIER> {jjtn000.addToken(s.image); connectors.add(new Connector(s.image)); index = connectors.size()-1;}
    ( ":" lookup_TypeByName() ( "," lookup_TypeByName())* )?
     ( "=" u = <BRACKET_OPEN> {jjtn000.addToken(u.image);}
     (parse_ConnectorDescription(index))* v = <BRACKET_CLOSE> {jjtn000.addToken(v.image);} ";" | ";" ) )*
     "}" ( ";" )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}         
    
void parse_ConnectorDescription(int index):{/*@bgen(jjtree) parse_ConnectorDescription */
  ASTparse_ConnectorDescription jjtn000 = new ASTparse_ConnectorDescription(JJTPARSE_CONNECTORDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parse_ConnectorDescription */
    try {
/*@egen*/
    ( RoleDeclaration(index)        
    | RolesBlock(index)| PropertiesBlock(index, "Conn") | PropertyDeclaration(index, "Conn"))/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void parse_InnerRoleDescription(int index):{/*@bgen(jjtree) parse_InnerRoleDescription */
  ASTparse_InnerRoleDescription jjtn000 = new ASTparse_InnerRoleDescription(JJTPARSE_INNERROLEDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parse_InnerRoleDescription */
    try {
/*@egen*/
    ( PropertiesBlock(index, "Role") | PropertyDeclaration(index, "Role"))/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PortDeclaration(int index):{/*@bgen(jjtree) PortDeclaration */
                                 ASTPortDeclaration jjtn000 = new ASTPortDeclaration(JJTPORTDECLARATION);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) PortDeclaration */
   try {
/*@egen*/
   t = <PORT> {jjtn000.addToken(t.image);} s = <IDENTIFIER> {jjtn000.addToken(s.image);
   if(index != -1) {components.get(index).addProperty(t.image, s.image+"_"+components.get(index).getName()); components.get(index).addValue("");}
    String st = table.addSymbol(s.image, t.image); if(!st.equals("")) semanticsErrors.add(st);
    SymbolTable copy = new SymbolTable(table.getStrings()); tableStack.push(copy);}   
   (( ":" lookup_TypeByName() ( "," lookup_TypeByName() )* )?
   ( "=" parse_descriptionsComp(index))?   {table = new SymbolTable(tableStack.pop().getStrings());} ";" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void PortsBlock(int index):{/*@bgen(jjtree) PortsBlock */
                            ASTPortsBlock jjtn000 = new ASTPortsBlock(JJTPORTSBLOCK);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, x, y;}
{/*@bgen(jjtree) PortsBlock */
    try {
/*@egen*/
    t = <PORTS> {jjtn000.addToken(t.image);}  x = "{" {jjtn000.addToken(x.image);}
    (
      s = <IDENTIFIER> {jjtn000.addToken(s.image); components.get(index).addProperty("Port", s.image+components.get(index).getName());}
      ( ","
              |( ":" lookup_TypeByName() ( "," lookup_TypeByName() )* )?
                      ( "=" parse_descriptions(index) ";" | ";" ) )?
    )*
    y = "}" {jjtn000.addToken(y.image);}";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}  
 
void parse_PortRoleDescription():{/*@bgen(jjtree) parse_PortRoleDescription */
  ASTparse_PortRoleDescription jjtn000 = new ASTparse_PortRoleDescription(JJTPARSE_PORTROLEDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parse_PortRoleDescription */
    try {
/*@egen*/
    ( parse_PropertiesChoice() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
 
void RoleDeclaration(int index):{/*@bgen(jjtree) RoleDeclaration */
                                 ASTRoleDeclaration jjtn000 = new ASTRoleDeclaration(JJTROLEDECLARATION);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) RoleDeclaration */
    try {
/*@egen*/
    t = <ROLE> {jjtn000.addToken(t.image);} s = <IDENTIFIER> {jjtn000.addToken(s.image);}
    {if(index != -1) {connectors.get(index).addProperty(t.image, s.image); connectors.get(index).addValue("");}
     String st = table.addSymbol(s.image, t.image); if(!st.equals("")) semanticsErrors.add(st);
     SymbolTable copy = new SymbolTable(table.getStrings()); tableStack.push(copy);}
    ( ":" lookup_TypeByName() ( "," lookup_TypeByName() )* )?
    ( "=" parse_descriptionsConn(index) {table = new SymbolTable(tableStack.pop().getStrings());} ";" | ";" )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
 
void MembersBlock():{/*@bgen(jjtree) MembersBlock */
                     ASTMembersBlock jjtn000 = new ASTMembersBlock(JJTMEMBERSBLOCK);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, x, y;}
{/*@bgen(jjtree) MembersBlock */
    try {
/*@egen*/
    t = <MEMBERS> {jjtn000.addToken(t.image);} x = "{" {jjtn000.addToken(x.image);}( QualifiedReference() ( ";" ) )* y = "}" {jjtn000.addToken(y.image);}";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
 
void QualifiedReference ():{/*@bgen(jjtree) QualifiedReference */
                            ASTQualifiedReference jjtn000 = new ASTQualifiedReference(JJTQUALIFIEDREFERENCE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) QualifiedReference */
    try {
/*@egen*/
    t = <IDENTIFIER> {jjtn000.addToken(t.image);} ( ( "." s = <IDENTIFIER> {jjtn000.addToken(s.image);} ) )*/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
 
void RolesBlock(int index):{/*@bgen(jjtree) RolesBlock */
                            ASTRolesBlock jjtn000 = new ASTRolesBlock(JJTROLESBLOCK);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) RolesBlock */
    try {
/*@egen*/
    t = <ROLES> {jjtn000.addToken(t.image);} "{"
    (
      s = <IDENTIFIER> {jjtn000.addToken(s.image); if(index != -1) connectors.get(index).addProperty("Role", s.image);}
      ( ","
              |( ":" lookup_TypeByName() ( "," lookup_TypeByName() )* )?
                      ( "=" parse_descriptions(-1) ";" | ";" ) )?
    )*
    "}" ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void parse_PropertiesChoice(): {/*@bgen(jjtree) parse_PropertiesChoice */
  ASTparse_PropertiesChoice jjtn000 = new ASTparse_PropertiesChoice(JJTPARSE_PROPERTIESCHOICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parse_PropertiesChoice */
        try {
/*@egen*/
        PropertyDeclaration(-1, "") | PropertiesBlock(-1, "") | RepresentationDeclaration() | parse_DesignRule()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}     
 
void AttachmentsDeclaration():{/*@bgen(jjtree) AttachmentsDeclaration */
                               ASTAttachmentsDeclaration jjtn000 = new ASTAttachmentsDeclaration(JJTATTACHMENTSDECLARATION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, v;}
{/*@bgen(jjtree) AttachmentsDeclaration */
    try {
/*@egen*/ 
    (
      ( t = <ATTACHMENTS> {jjtn000.addToken(t.image);} ":" "{"
              (
                 s = <ELEMENT>{jjtn000.addToken(s.image);}  u = <TO> {jjtn000.addToken(u.image);} v = <ELEMENT> {jjtn000.addToken(v.image);}
				{					Attachment a = new Attachment();
					String[] from = s.image.split("\\.");
					a.setFromPackage(from[0]);
					a.setFromPort(from[1]);
					String[] to = v.image.split("\\.");
					a.setToPackage(to[0]);
					a.setToPort(to[1]);
					attachments.add(a);
				}
                 ( "{" ( PropertyDeclaration(-1, "") | PropertiesBlock(-1, "") ) * "}" )? ";"
              )*
              "}" ( ";" )?
       )
      |( t = <ATTACHMENT> {jjtn000.addToken(t.image);}
                s = <ELEMENT> {jjtn000.addToken(s.image);}  u = <TO> {jjtn000.addToken(u.image);} v = <ELEMENT> {jjtn000.addToken(v.image);}
				{
					Attachment a = new Attachment();
					String[] from = s.image.split("\\.");
					a.setFromPackage(from[0]);
					a.setFromPort(from[1]);
					String[] to = v.image.split("\\.");
					a.setToPackage(to[0]);
					a.setToPort(to[1]);
					attachments.add(a);
				}
                  ( "{" ( PropertyDeclaration(-1, "") | PropertiesBlock(-1, "") )*
                  "}" )? ";" )
     )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PropertyDeclaration(int index, String type):{/*@bgen(jjtree) PropertyDeclaration */
                                                  ASTPropertyDeclaration jjtn000 = new ASTPropertyDeclaration(JJTPROPERTYDECLARATION);
                                                  boolean jjtc000 = true;
                                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) PropertyDeclaration */
    try {
/*@egen*/
    t = <PROPERTY> {jjtn000.addToken(t.image);} parse_PropertyDescription(index, type) ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PropertiesBlock(int index, String type):{/*@bgen(jjtree) PropertiesBlock */
                                              ASTPropertiesBlock jjtn000 = new ASTPropertiesBlock(JJTPROPERTIESBLOCK);
                                              boolean jjtc000 = true;
                                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) PropertiesBlock */
    try {
/*@egen*/
    t = <PROPERTIES> {jjtn000.addToken(t.image);} "{"
    ( parse_PropertyDescription(index, type) ";"
    ( parse_PropertyDescription(index, type)  ";" )* )
    "}" ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void parse_PropertyDescription(int index, String type):{/*@bgen(jjtree) parse_PropertyDescription */
                                                        ASTparse_PropertyDescription jjtn000 = new ASTparse_PropertyDescription(JJTPARSE_PROPERTYDESCRIPTION);
                                                        boolean jjtc000 = true;
                                                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, v;}
{/*@bgen(jjtree) parse_PropertyDescription */
    try {
/*@egen*/
    ( t = <PROPERTY> {jjtn000.addToken(t.image);} )? 
        s = <IDENTIFIER>
        {jjtn000.addToken(s.image);
        	if(index != -1)
        	{
        	  if(type.equals("Comp")) components.get(index).addProperty("Property", s.image);
        	  else if(type.equals("Conn")) connectors.get(index).addProperty("Property", s.image);
        	  else if(type.equals("Role")) connectors.get(index).addProperty("RoleProperty", s.image);
        	  else if(type.equals("Port")) components.get(index).addProperty("PortProperty", s.image);
        	}}
        ( ":" PropertyTypeDescription() )? ( "=" PropertyValueDeclaration(type, index) )?
        | u = <PROPBEGIN> {jjtn000.addToken(u.image);}( parse_PropertyDescription(index, type)  ";" )*  v = <PROPEND> {jjtn000.addToken(v.image);} ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PropertyTypeDeclaration():{/*@bgen(jjtree) PropertyTypeDeclaration */
                                ASTPropertyTypeDeclaration jjtn000 = new ASTPropertyTypeDeclaration(JJTPROPERTYTYPEDECLARATION);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, v, w, x;}
{/*@bgen(jjtree) PropertyTypeDeclaration */
    try {
/*@egen*/
    t = <PROPERTY> {jjtn000.addToken(t.image);} s = <TYPE> {jjtn000.addToken(s.image);}  u = <IDENTIFIER> {jjtn000.addToken(u.image);}
        ( "=" 
                ( v = <INT> {jjtn000.addToken(v.image);}
                | v = <FLOAT> {jjtn000.addToken(v.image);}
                | v = <STRING> {jjtn000.addToken(v.image);}
                | v = <BOOLEAN> {jjtn000.addToken(v.image);}
                | v = <ENUM> ( "{" w = <IDENTIFIER> {jjtn000.addToken(w.image);}( "," x = <IDENTIFIER> {jjtn000.addToken(x.image);})* "}" )? 
                | v = <SET> {jjtn000.addToken(v.image);}( "{" (PropertyTypeDescription())* "}" )
                | v = <SEQUENCE> {jjtn000.addToken(v.image);}( "<" (PropertyTypeDescription())* ">" )
                | v = <RECORD> {jjtn000.addToken(v.image);} "[" ( parse_RecordFieldDescription() ";")* "]"
                | v = <IDENTIFIER> {jjtn000.addToken(v.image);})  
        ";")/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PropertyTypeDescription():{/*@bgen(jjtree) PropertyTypeDescription */
                                ASTPropertyTypeDescription jjtn000 = new ASTPropertyTypeDescription(JJTPROPERTYTYPEDESCRIPTION);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token s, u, v;}
{/*@bgen(jjtree) PropertyTypeDescription */
    try {
/*@egen*/
    s = <ANY>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.addToken(s.image);}
        | s = <INT>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.addToken(s.image);}
        | s = <FLOAT>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.addToken(s.image);}     
        | s = <STRING>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.addToken(s.image);}
        | s = <BOOLEAN>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.addToken(s.image);}
        | s = <SET> {jjtn000.addToken(s.image);}  "{" ( LOOKAHEAD(2) (PropertyTypeDescription())* | (( u = <ELEMENT> {jjtn000.addToken(u.image);}| u = <SYSTEM> {jjtn000.addToken(u.image);}| u = <COMPONENT> {jjtn000.addToken(u.image);}| u = <CONNECTOR> {jjtn000.addToken(u.image);}| u = <PORT> {jjtn000.addToken(u.image);}| u = <ROLE> {jjtn000.addToken(u.image);}| u = <TYPE> {jjtn000.addToken(u.image);}| u = <PROPERTY> {jjtn000.addToken(u.image);}| u = <REPRESENTATION> {jjtn000.addToken(u.image);}) )) "}" 
        | s = <SEQUENCE> {jjtn000.addToken(s.image);} ( "<" ( PropertyTypeDescription() )* ">" ) ?
        | s = <RECORD> {jjtn000.addToken(s.image);} "[" ( parse_RecordFieldDescription() ";" )* "]"
        | s = <ENUM> {jjtn000.addToken(s.image);} ( "{" (u = <IDENTIFIER> {jjtn000.addToken(u.image);} ( "," v = <IDENTIFIER> {jjtn000.addToken(v.image);})*)* "}" )    
        | lookup_TypeByName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void parse_RecordFieldDescription():{/*@bgen(jjtree) parse_RecordFieldDescription */
                                     ASTparse_RecordFieldDescription jjtn000 = new ASTparse_RecordFieldDescription(JJTPARSE_RECORDFIELDDESCRIPTION);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) parse_RecordFieldDescription */
    try {
/*@egen*/
    t = <IDENTIFIER> {jjtn000.addToken(t.image);} ( "," s = <IDENTIFIER> {jjtn000.addToken(s.image);})* ( ":" PropertyTypeDescription())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}    
    
void  PropertyValueDeclaration(String type, int index):{/*@bgen(jjtree) PropertyValueDeclaration */
                                                        ASTPropertyValueDeclaration jjtn000 = new ASTPropertyValueDeclaration(JJTPROPERTYVALUEDECLARATION);
                                                        boolean jjtc000 = true;
                                                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) PropertyValueDeclaration */
    try {
/*@egen*/
    t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {jjtn000.addToken(t.image); if(index != -1) {if(type.equals("Comp")) components.get(index).addValue(t.image); else connectors.get(index).addValue(t.image);}}
    | t = <FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ {jjtn000.addToken(t.image); if(index != -1) {if(type.equals("Comp")) components.get(index).addValue(t.image); else connectors.get(index).addValue(t.image);}}
    | t = <STRING_LITERAL>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {jjtn000.addToken(t.image); if(index != -1) {if(type.equals("Comp")) components.get(index).addValue(t.image); else connectors.get(index).addValue(t.image);}}
    | t = <FALSE>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.addToken(t.image); if(index != -1) {if(type.equals("Comp")) components.get(index).addValue(t.image); else connectors.get(index).addValue(t.image);}}
    | t = <TRUE>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.addToken(t.image); if(index != -1) {if(type.equals("Comp")) components.get(index).addValue(t.image); else connectors.get(index).addValue(t.image);}}
    | AcmeSetValue(type, index)        
    | AcmeSequenceValue(type, index)        
    | AcmeRecordValue(type, index)        
    | t = <IDENTIFIER>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.addToken(t.image); if(index != -1) {if(type.equals("Comp")) components.get(index).addValue(t.image); else connectors.get(index).addValue(t.image);}}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}     
    
void AcmeSetValue(String type, int index):{/*@bgen(jjtree) AcmeSetValue */
  ASTAcmeSetValue jjtn000 = new ASTAcmeSetValue(JJTACMESETVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AcmeSetValue */
    try {
/*@egen*/
    "{" (PropertyValueDeclaration(type, index) ( "," PropertyValueDeclaration(type, index) )* )* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
    
void AcmeSequenceValue(String type, int index):{/*@bgen(jjtree) AcmeSequenceValue */
  ASTAcmeSequenceValue jjtn000 = new ASTAcmeSequenceValue(JJTACMESEQUENCEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AcmeSequenceValue */
    try {
/*@egen*/
    "<" (PropertyValueDeclaration(type, index) ( "," PropertyValueDeclaration(type, index) )* )* ">"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}     
    
void AcmeRecordValue(String type, int index):{/*@bgen(jjtree) AcmeRecordValue */
  ASTAcmeRecordValue jjtn000 = new ASTAcmeRecordValue(JJTACMERECORDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AcmeRecordValue */
    try {
/*@egen*/
    "[" ( RecordFieldValue(type, index) ";" )* "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}        
    
void RecordFieldValue(String type, int index):{/*@bgen(jjtree) RecordFieldValue */
                                               ASTRecordFieldValue jjtn000 = new ASTRecordFieldValue(JJTRECORDFIELDVALUE);
                                               boolean jjtc000 = true;
                                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) RecordFieldValue */
    try {
/*@egen*/
    t = <IDENTIFIER> {jjtn000.addToken(t.image);} ( ":" PropertyTypeDescription() )? "=" PropertyValueDeclaration(type, index)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}      
    
void RepresentationDeclaration():{/*@bgen(jjtree) RepresentationDeclaration */
                                  ASTRepresentationDeclaration jjtn000 = new ASTRepresentationDeclaration(JJTREPRESENTATIONDECLARATION);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) RepresentationDeclaration */
    try {
/*@egen*/
    t = <REPRESENTATION> {jjtn000.addToken(t.image);} ( s = <IDENTIFIER> {jjtn000.addToken(s.image);} "=" )? "{" SystemDeclaration() ( BindingsMapDeclaration())? "}" ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/      
}
    
void BindingsMapDeclaration():{/*@bgen(jjtree) BindingsMapDeclaration */
                               ASTBindingsMapDeclaration jjtn000 = new ASTBindingsMapDeclaration(JJTBINDINGSMAPDECLARATION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BindingsMapDeclaration */
    try {
/*@egen*/
    t = <BINDINGS> {jjtn000.addToken(t.image);} "{" ( BindingDeclaration() )* "}" ( ";" )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}       
    
void BindingDeclaration():{/*@bgen(jjtree) BindingDeclaration */
                           ASTBindingDeclaration jjtn000 = new ASTBindingDeclaration(JJTBINDINGDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, v, w;}
{/*@bgen(jjtree) BindingDeclaration */
    try {
/*@egen*/
    ( t = <IDENTIFIER> {jjtn000.addToken(t.image);} ("."  s = <IDENTIFIER> {jjtn000.addToken(s.image);} )? ) u = <TO> {jjtn000.addToken(u.image);} ( v = <IDENTIFIER> {jjtn000.addToken(v.image);} ("."  w = <IDENTIFIER> {jjtn000.addToken(w.image);})? ) 
        ( "{" ( PropertyDeclaration(-1, "") | PropertiesBlock(-1, "") )* "}" )? ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}     
    
void DesignAnalysisDeclaration():{/*@bgen(jjtree) DesignAnalysisDeclaration */
                                  ASTDesignAnalysisDeclaration jjtn000 = new ASTDesignAnalysisDeclaration(JJTDESIGNANALYSISDECLARATION);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, v, w;}
{/*@bgen(jjtree) DesignAnalysisDeclaration */
    try {
/*@egen*/
    ( ( t = <EXTERNAL> {jjtn000.addToken(t.image);} ( s = <DESIGN> {jjtn000.addToken(s.image);} )? u = <ANALYSIS> {jjtn000.addToken(u.image);} v = <IDENTIFIER> {jjtn000.addToken(v.image); table.addSymbol(u.image, v.image); }"(" FormalParams() ")" ":" ( PropertyTypeDescription()       
    | w = <COMPONENT> {jjtn000.addToken(w.image);}
    | w = <GROUP> {jjtn000.addToken(w.image);}
    | w = <CONNECTOR> {jjtn000.addToken(w.image);}
    | w = <PORT> {jjtn000.addToken(w.image);}
    | w = <ROLE> {jjtn000.addToken(w.image);}
    | w = <SYSTEM>{jjtn000.addToken(w.image);}
    | w = <ELEMENT> {jjtn000.addToken(w.image);}
    | w = <TYPE> {jjtn000.addToken(w.image);}  ) "=" JavaMethodCallExpr() ";" ) 
    | ( ( t = <DESIGN> {jjtn000.addToken(t.image);})? s = <ANALYSIS> {jjtn000.addToken(s.image);} u = <IDENTIFIER> {jjtn000.addToken(u.image);} "(" FormalParams() ")" ":" ( PropertyTypeDescription() 
    | v = <COMPONENT> {jjtn000.addToken(v.image);}
    | v = <GROUP> {jjtn000.addToken(v.image);}
    | v = <CONNECTOR> {jjtn000.addToken(v.image);}
    | v = <PORT> {jjtn000.addToken(v.image);}
    | v = <ROLE> {jjtn000.addToken(v.image);}
    | v = <SYSTEM> {jjtn000.addToken(v.image);}
    | v = <ELEMENT> {jjtn000.addToken(v.image);}
    | v = <TYPE> {jjtn000.addToken(v.image);}) "=" DesignRuleExpression() ";" | ( t = <INVARIANT> {jjtn000.addToken(t.image);}
        | t = <HEURISTIC> {jjtn000.addToken(t.image);}) DesignRuleExpression() ( s = <PROPBEGIN> {jjtn000.addToken(s.image);} (parse_PropertyDescription(-1, "") ";")* u = <PROPEND> {jjtn000.addToken(u.image);})? ";" ) )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}     
    
void parse_DesignRule():{/*@bgen(jjtree) parse_DesignRule */
                         ASTparse_DesignRule jjtn000 = new ASTparse_DesignRule(JJTPARSE_DESIGNRULE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, v;}
{/*@bgen(jjtree) parse_DesignRule */
   try {
/*@egen*/
   ( t = <DESIGN> {jjtn000.addToken(t.image);} )? ( s = <INVARIANT> {jjtn000.addToken(s.image);}
        | s = <HEURISTIC> {jjtn000.addToken(s.image);}) DesignRuleExpression() ( u = <PROPBEGIN> {jjtn000.addToken(u.image);}(parse_PropertyDescription(-1, "") ";")* v = <PROPEND> {jjtn000.addToken(v.image);})? ";"/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}       
    
void DesignRuleExpression():{/*@bgen(jjtree) DesignRuleExpression */
  ASTDesignRuleExpression jjtn000 = new ASTDesignRuleExpression(JJTDESIGNRULEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DesignRuleExpression */
    try {
/*@egen*/
    QuantifiedExpression()        
    | BooleanExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}   
    
void QuantifiedExpression():{/*@bgen(jjtree) QuantifiedExpression */
                             ASTQuantifiedExpression jjtn000 = new ASTQuantifiedExpression(JJTQUANTIFIEDEXPRESSION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, v, w;}
{/*@bgen(jjtree) QuantifiedExpression */
    try {
/*@egen*/
    ( ( t = <FORALL> {jjtn000.addToken(t.image);} |  t = <EXISTS> {jjtn000.addToken(t.image);}  ( s = <UNIQUE> {jjtn000.addToken(s.image);})? )
    u = <IDENTIFIER> {jjtn000.addToken(u.image); table.addSymbol(t.image, u.image);} 
    ( ( ":" | v = <SET_DECLARE>{jjtn000.addToken(v.image);} ) ( LOOKAHEAD(3) Type() | lookup_arbitraryTypeByName()) )? 
    w = <IN> {jjtn000.addToken(w.image);} ( SetExpression() | Reference()) "|" DesignRuleExpression())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}     
    
void BooleanExpression() :{/*@bgen(jjtree) BooleanExpression */
                           ASTBooleanExpression jjtn000 = new ASTBooleanExpression(JJTBOOLEANEXPRESSION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BooleanExpression */
    try {
/*@egen*/
    OrExpression() ( t = <AND> {jjtn000.addToken(t.image);}  OrExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}             
    
void OrExpression() :{/*@bgen(jjtree) OrExpression */
                      ASTOrExpression jjtn000 = new ASTOrExpression(JJTOREXPRESSION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) OrExpression */
    try {
/*@egen*/
    ImpliesExpression() ( t = <OR> {jjtn000.addToken(t.image);}  ImpliesExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
    
void ImpliesExpression() :{/*@bgen(jjtree) ImpliesExpression */
                           ASTImpliesExpression jjtn000 = new ASTImpliesExpression(JJTIMPLIESEXPRESSION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ImpliesExpression */
    try {
/*@egen*/
    IffExpression() ( t = <IMPLIES> {jjtn000.addToken(t.image);}  IffExpression() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}     
    
void IffExpression():{/*@bgen(jjtree) IffExpression */
                      ASTIffExpression jjtn000 = new ASTIffExpression(JJTIFFEXPRESSION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) IffExpression */
    try {
/*@egen*/
    EqualityExpression() ( t = <IFF> {jjtn000.addToken(t.image);}  EqualityExpression() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
   
void EqualityExpression() :{/*@bgen(jjtree) EqualityExpression */
                            ASTEqualityExpression jjtn000 = new ASTEqualityExpression(JJTEQUALITYEXPRESSION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) EqualityExpression */
    try {
/*@egen*/
    RelationalExpression() ( t = <EQ> {jjtn000.addToken(t.image);}  RelationalExpression() | t = <NE> {jjtn000.addToken(t.image);}  RelationalExpression() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}       

void RelationalExpression() :{/*@bgen(jjtree) RelationalExpression */
                              ASTRelationalExpression jjtn000 = new ASTRelationalExpression(JJTRELATIONALEXPRESSION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) RelationalExpression */
    try {
/*@egen*/
    AdditiveExpression() ( "<" AdditiveExpression() | ">" AdditiveExpression() | t = <LE>  {jjtn000.addToken(t.image);} AdditiveExpression() | t = <GE> {jjtn000.addToken(t.image);}  AdditiveExpression() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/        
}

void AdditiveExpression():{/*@bgen(jjtree) AdditiveExpression */
                           ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) AdditiveExpression */
    try {
/*@egen*/
    MultiplicativeExpression() ( t = <PLUS> {jjtn000.addToken(t.image);}  MultiplicativeExpression() | t = <MINUS> {jjtn000.addToken(t.image);}  MultiplicativeExpression())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}    
    
void MultiplicativeExpression():{/*@bgen(jjtree) MultiplicativeExpression */
                                 ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MultiplicativeExpression */
    try {
/*@egen*/
    UnaryExpression()( t = <STAR> {jjtn000.addToken(t.image);}  UnaryExpression() | t = <SLASH> {jjtn000.addToken(t.image);}  UnaryExpression() | t = <REM> {jjtn000.addToken(t.image);}  UnaryExpression() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}   
    
void UnaryExpression():{/*@bgen(jjtree) UnaryExpression */
                        ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) UnaryExpression */
    try {
/*@egen*/
    t = <BANG> {jjtn000.addToken(t.image);}  UnaryExpression()        
    | t = <MINUS> {jjtn000.addToken(t.image);}  UnaryExpression()        
    | PrimitiveExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
    
void PrimitiveExpression():{/*@bgen(jjtree) PrimitiveExpression */
  ASTPrimitiveExpression jjtn000 = new ASTPrimitiveExpression(JJTPRIMITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrimitiveExpression */
    try {
/*@egen*/
    "(" DesignRuleExpression() ")"        
    | LiteralConstant()        
    | Reference()        
    | SetExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}    
    
void Reference():{/*@bgen(jjtree) Reference */
                  ASTReference jjtn000 = new ASTReference(JJTREFERENCE);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) Reference */
    try {
/*@egen*/
    t = <IDENTIFIER>  {jjtn000.addToken(t.image);} 
    ( "."
    ( s = <IDENTIFIER> {jjtn000.addToken(s.image);} 
    | s = <TYPE> {jjtn000.addToken(s.image);} 
    | s = <COMPONENTS> {jjtn000.addToken(s.image);} 
    | s = <CONNECTORS>  {jjtn000.addToken(s.image);} 
    | s = <PORTS> {jjtn000.addToken(s.image);} 
    | s = <ROLES> {jjtn000.addToken(s.image);} 
    | s = <MEMBERS> {jjtn000.addToken(s.image);} 
    | s = <PROPERTIES> {jjtn000.addToken(s.image);} 
    | s = <REPRESENTATIONS> {jjtn000.addToken(s.image);} 
    | s = <ATTACHEDPORTS> {jjtn000.addToken(s.image);} 
    | s = <ATTACHEDROLES> {jjtn000.addToken(s.image);}  ) )*
     ( "(" ActualParams()        ")" )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}      
    
void JavaMethodCallExpr():{/*@bgen(jjtree) JavaMethodCallExpr */
                           ASTJavaMethodCallExpr jjtn000 = new ASTJavaMethodCallExpr(JJTJAVAMETHODCALLEXPR);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) JavaMethodCallExpr */
    try {
/*@egen*/
    t = <IDENTIFIER> {jjtn000.addToken(t.image);} ( "." s = <IDENTIFIER> {jjtn000.addToken(s.image);} )* "(" ActualParams() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LiteralConstant():{/*@bgen(jjtree) LiteralConstant */
                        ASTLiteralConstant jjtn000 = new ASTLiteralConstant(JJTLITERALCONSTANT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LiteralConstant */
    try {
/*@egen*/
    ( t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <STRING_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <TRUE>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <FALSE>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <COMPONENT>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <GROUP>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <CONNECTOR>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <PORT>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <ROLE>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <SYSTEM>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/  {jjtn000.addToken(t.image);}   )
    | ( t = <ELEMENT>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <PROPERTY>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <INT>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/  {jjtn000.addToken(t.image);}   )
    | ( t = <FLOAT>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <STRING>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <BOOLEAN>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/  {jjtn000.addToken(t.image);}   )
    | ( t = <ENUM>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <SET>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <SEQUENCE>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.addToken(t.image);}   )
    | ( t = <RECORD>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.addToken(t.image);}   )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
   
void ActualParams() :{/*@bgen(jjtree) ActualParams */
  ASTActualParams jjtn000 = new ASTActualParams(JJTACTUALPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActualParams */
    try {
/*@egen*/
    ( ActualParam() ( "," ActualParam() )* )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}        
    
void FormalParams() :{/*@bgen(jjtree) FormalParams */
  ASTFormalParams jjtn000 = new ASTFormalParams(JJTFORMALPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FormalParams */
    try {
/*@egen*/
    ( FormalParam() ( "," FormalParam() )* )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}        
    
void ActualParam() :{/*@bgen(jjtree) ActualParam */
  ASTActualParam jjtn000 = new ASTActualParam(JJTACTUALPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActualParam */
        try {
/*@egen*/
        DesignRuleExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}        
    
void FormalParam() :{/*@bgen(jjtree) FormalParam */
                     ASTFormalParam jjtn000 = new ASTFormalParam(JJTFORMALPARAM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u;}
{/*@bgen(jjtree) FormalParam */
    try {
/*@egen*/
    t = <IDENTIFIER> {jjtn000.addToken(t.image);}  ( "," s = <IDENTIFIER> {jjtn000.addToken(s.image);}  )* ":" ( u = <ELEMENT>/*@bgen(jjtree)*/
                                                                                                                               {
                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                 jjtc000 = false;
                                                                                                                               }
/*@egen*/ {jjtn000.addToken(u.image);}  | u = <SYSTEM>/*@bgen(jjtree)*/
                                                                                                                                                                            {
                                                                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                              jjtc000 = false;
                                                                                                                                                                            }
/*@egen*/ {jjtn000.addToken(u.image);}  | u = <COMPONENT>/*@bgen(jjtree)*/
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                              jjtc000 = false;
                                                                                                                                                                                                                            }
/*@egen*/ {jjtn000.addToken(u.image);}  | u = <CONNECTOR>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                              jjtc000 = false;
                                                                                                                                                                                                                                                                            }
/*@egen*/ {jjtn000.addToken(u.image);}  | u = <PORT>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                         jjtc000 = false;
                                                                                                                                                                                                                                                                                                                       }
/*@egen*/ {jjtn000.addToken(u.image);} | u = <ROLE>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                   jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                 }
/*@egen*/ {jjtn000.addToken(u.image);}  | u = <TYPE>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                              jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                            }
/*@egen*/ {jjtn000.addToken(u.image);} | u = <PROPERTY>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                            jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
/*@egen*/ {jjtn000.addToken(u.image);}  | u = <REPRESENTATION>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 jjtc000 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               }
/*@egen*/ {jjtn000.addToken(u.image);}  | PropertyTypeDescription() )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}            
     
void SetExpression() :{/*@bgen(jjtree) SetExpression */
  ASTSetExpression jjtn000 = new ASTSetExpression(JJTSETEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SetExpression */
      try {
/*@egen*/
      "{" (LiteralSet() | SetConstructor()) "}"/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}   
    
void LiteralSet() :{/*@bgen(jjtree) LiteralSet */
  ASTLiteralSet jjtn000 = new ASTLiteralSet(JJTLITERALSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LiteralSet */
        try {
/*@egen*/
        ( LiteralConstant() | Reference() ) ( "," ( LiteralConstant() | Reference() ) )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/         
}
    
void SetConstructor() :{/*@bgen(jjtree) SetConstructor */
                        ASTSetConstructor jjtn000 = new ASTSetConstructor(JJTSETCONSTRUCTOR);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s, u, v;}
{/*@bgen(jjtree) SetConstructor */
    try {
/*@egen*/
    ((t = <SELECT> {jjtn000.addToken(t.image);}  s = <IDENTIFIER> {jjtn000.addToken(s.image); table.addSymbol(s.image, t.image); }
    (":" lookup_arbitraryTypeByName())? u = <IN> {jjtn000.addToken(u.image);}  ( SetExpression() | Reference()) "|" DesignRuleExpression()) 
    | (t = <COLLECT> {jjtn000.addToken(t.image);}  s = <IDENTIFIER> {jjtn000.addToken(s.image); table.addSymbol(s.image, t.image); }
     "." u = <IDENTIFIER> {jjtn000.addToken(u.image);}  ":" lookup_arbitraryTypeByName() "." lookup_arbitraryTypeByName() v = <IN> {jjtn000.addToken(v.image);}  ( SetExpression() | Reference() )) 
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
} 
    
void RecordType() :{/*@bgen(jjtree) RecordType */
                    ASTRecordType jjtn000 = new ASTRecordType(JJTRECORDTYPE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) RecordType */
    try {
/*@egen*/
    t = <RECORD> {jjtn000.addToken (t.image);}  "[" RecordItem() ( "," RecordItem())* "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}           

void RecordItem() :{/*@bgen(jjtree) RecordItem */
                    ASTRecordItem jjtn000 = new ASTRecordItem(JJTRECORDITEM);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) RecordItem */
    try {
/*@egen*/
    t = <IDENTIFIER> {jjtn000.addToken(t.image);}  ":" Type()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
    
void SetType() :{/*@bgen(jjtree) SetType */
                 ASTSetType jjtn000 = new ASTSetType(JJTSETTYPE);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) SetType */
    try {
/*@egen*/
    t = <SET> {jjtn000.addToken(t.image);}  "{" Type() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}           
    
void SequenceType() :{/*@bgen(jjtree) SequenceType */
                      ASTSequenceType jjtn000 = new ASTSequenceType(JJTSEQUENCETYPE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) SequenceType */
    try {
/*@egen*/
    t = <SEQUENCE> {jjtn000.addToken(t.image);}  "{" Type() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}       
    
void Signature() :{/*@bgen(jjtree) Signature */
  ASTSignature jjtn000 = new ASTSignature(JJTSIGNATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Signature */
    try {
/*@egen*/
    Type() "<->" Type()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
    
void Type() :{/*@bgen(jjtree) Type */
              ASTType jjtn000 = new ASTType(JJTTYPE);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    ( t = <IDENTIFIER> {jjtn000.addToken(t.image);}  ( "." s = <IDENTIFIER> {jjtn000.addToken (s.image);} )* )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}     
    
void PrimitiveType() :{/*@bgen(jjtree) PrimitiveType */
                       ASTPrimitiveType jjtn000 = new ASTPrimitiveType(JJTPRIMITIVETYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) PrimitiveType */
    try {
/*@egen*/
    t = <COMPONENT>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.addToken(t.image);}  | t = <GROUP>/*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                }
/*@egen*/ {jjtn000.addToken(t.image);}  | t = <CONNECTOR>/*@bgen(jjtree)*/
                                                                                                                {
                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                  jjtc000 = false;
                                                                                                                }
/*@egen*/ {jjtn000.addToken(t.image);}  | t = <PORT>/*@bgen(jjtree)*/
                                                                                                                                                           {
                                                                                                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                             jjtc000 = false;
                                                                                                                                                           }
/*@egen*/ {jjtn000.addToken(t.image);}  | t = <ROLE>/*@bgen(jjtree)*/
                                                                                                                                                                                                      {
                                                                                                                                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                        jjtc000 = false;
                                                                                                                                                                                                      }
/*@egen*/ {jjtn000.addToken(t.image);}  | t = <SYSTEM>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                     jjtc000 = false;
                                                                                                                                                                                                                                                   }
/*@egen*/ {jjtn000.addToken(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}   
    
void Element() :{/*@bgen(jjtree) Element */
                 ASTElement jjtn000 = new ASTElement(JJTELEMENT);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) Element */
    try {
/*@egen*/
    ( t = <IDENTIFIER> {jjtn000.addToken(t.image);}  ( "." s = <IDENTIFIER> {jjtn000.addToken(s.image);}  )* ) | CompoundElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}         
    
void CompoundElement() :{/*@bgen(jjtree) CompoundElement */
  ASTCompoundElement jjtn000 = new ASTCompoundElement(JJTCOMPOUNDELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompoundElement */
    try {
/*@egen*/
    Set() | Record() | Sequence()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/     
}
    
void Set() :{/*@bgen(jjtree) Set */
  ASTSet jjtn000 = new ASTSet(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Set */
        try {
/*@egen*/
        "{" Element() ( "," Element())* "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}       

void Record() :{/*@bgen(jjtree) Record */
                ASTRecord jjtn000 = new ASTRecord(JJTRECORD);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) Record */
    try {
/*@egen*/
    "[" t = <IDENTIFIER> {jjtn000.addToken(t.image);}  "=" Element()( "," s = <IDENTIFIER> {jjtn000.addToken(s.image);}  "=" Element())* "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/  
}

void Sequence() :{/*@bgen(jjtree) Sequence */
  ASTSequence jjtn000 = new ASTSequence(JJTSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Sequence */
        try {
/*@egen*/
	"<" Element() ( "," Element())* ">"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}